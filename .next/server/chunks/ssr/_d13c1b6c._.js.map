{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/pavelpetakov/%D0%9F%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B/MazeGenerator2/src/components/Toolbar.tsx"],"sourcesContent":["import React from 'react';\nimport { ActionIcon, Group } from '@mantine/core';\nimport { IconPointer, IconMap, IconDeviceFloppy } from '@tabler/icons-react';\n\ntype Tool = 'pointer' | 'map' | 'placing';\n\ninterface ToolbarProps {\n  activeTool: Tool;\n  onToolSelect: (tool: Tool) => void;\n  onSave: () => void;\n  isSaving: boolean;\n}\n\nconst Toolbar = ({ activeTool, onToolSelect, onSave, isSaving }: ToolbarProps) => (\n  <Group justify=\"space-between\" p=\"xs\" style={{ borderBottom: '1px solid #e0e0e0' }}>\n    <Group>\n      <ActionIcon\n        variant={activeTool === 'pointer' ? 'filled' : 'default'}\n        onClick={() => onToolSelect('pointer')}\n        aria-label=\"Pointer\"\n        size=\"lg\"\n      >\n        <IconPointer size={24} />\n      </ActionIcon>\n    </Group>\n    <Group>\n      <ActionIcon\n        variant={activeTool === 'map' ? 'filled' : 'default'}\n        onClick={() => onToolSelect('map')}\n        aria-label=\"Map\"\n        mr=\"md\"\n        size=\"lg\"\n      >\n        <IconMap size={24} />\n      </ActionIcon>\n      <ActionIcon\n        onClick={onSave}\n        aria-label=\"Save\"\n        loading={isSaving}\n        variant=\"default\"\n        size=\"lg\"\n      >\n        <IconDeviceFloppy size={24} />\n      </ActionIcon>\n    </Group>\n  </Group>\n);\n\nexport default Toolbar;\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;AAAA;;;;AAWA,MAAM,UAAU,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAgB,iBAC3E,8OAAC,yKAAA,CAAA,QAAK;QAAC,SAAQ;QAAgB,GAAE;QAAK,OAAO;YAAE,cAAc;QAAoB;;0BAC/E,8OAAC,yKAAA,CAAA,QAAK;0BACJ,cAAA,8OAAC,mLAAA,CAAA,aAAU;oBACT,SAAS,eAAe,YAAY,WAAW;oBAC/C,SAAS,IAAM,aAAa;oBAC5B,cAAW;oBACX,MAAK;8BAEL,cAAA,8OAAC,4NAAA,CAAA,cAAW;wBAAC,MAAM;;;;;;;;;;;;;;;;0BAGvB,8OAAC,yKAAA,CAAA,QAAK;;kCACJ,8OAAC,mLAAA,CAAA,aAAU;wBACT,SAAS,eAAe,QAAQ,WAAW;wBAC3C,SAAS,IAAM,aAAa;wBAC5B,cAAW;wBACX,IAAG;wBACH,MAAK;kCAEL,cAAA,8OAAC,oNAAA,CAAA,UAAO;4BAAC,MAAM;;;;;;;;;;;kCAEjB,8OAAC,mLAAA,CAAA,aAAU;wBACT,SAAS;wBACT,cAAW;wBACX,SAAS;wBACT,SAAQ;wBACR,MAAK;kCAEL,cAAA,8OAAC,sOAAA,CAAA,mBAAgB;4BAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;uCAMjB","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/pavelpetakov/%D0%9F%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B/MazeGenerator2/src/lib/data.ts"],"sourcesContent":["export const objectCategories = {\n    islands: \"Остров\",\n    start: \"Старт\",\n    fruits: \"Фрукты\",\n    stones: \"Камни\",\n    water: \"Вода\",\n    trees: \"Деревья\",\n    finish: \"Финиш\",\n    extra: \"Экстра\",\n};\n\nexport const data = {\n    islands: [\n        { name: \"Остров 1\", image: \"/assets/islands/island_1.png\" },\n        { name: \"Остров 2\", image: \"/assets/islands/island_2.png\" },\n        { name: \"Остров 3\", image: \"/assets/islands/island_3.png\" },\n    ],\n    start: [\n        { name: \"Корова\", image: \"/assets/hero/hero_cow.png\" },\n        { name: \"Кот\", image: \"/assets/hero/hero_cat.png\" },\n    ],\n    fruits: [\n        { name: \"Яблоко\", image: \"/assets/fruits/apple.png\" },\n        { name: \"Банан\", image: \"/assets/fruits/banana.png\" },\n        { name: \"Ягода\", image: \"/assets/fruits/berry.png\" },\n        { name: \"Капуста\", image: \"/assets/fruits/cabbage.png\" },\n        { name: \"Морковь\", image: \"/assets/fruits/carrot.png\" },\n        { name: \"Виноград\", image: \"/assets/fruits/grape.png\" },\n    ],\n    stones: [\n        { name: \"Камень 1\", image: \"/assets/stones/stone_1.png\" },\n        { name: \"Камень 2\", image: \"/assets/stones/stone_2.png\" },\n        { name: \"Камень 3\", image: \"/assets/stones/stone_3.png\" },\n    ],\n    water: [\n        { name: \"Вода 1\", image: \"/assets/water/water_1.png\" },\n        { name: \"Вода 2\", image: \"/assets/water/water_2.png\" },\n        { name: \"Вода 3\", image: \"/assets/water/water_3.png\" },\n        { name: \"Вода 4\", image: \"/assets/water/water_4.png\" },\n    ],\n    trees: [\n        { name: \"Дерево 1\", image: \"/assets/trees/tree_1.png\" },\n        { name: \"Дерево 2\", image: \"/assets/trees/tree_2.png\" },\n        { name: \"Дерево 3\", image: \"/assets/trees/tree_3.png\" },\n        { name: \"Дерево 4\", image: \"/assets/trees/tree_4.png\" },\n    ],\n    finish: [{ name: \"Финиш 1\", image: \"/assets/finish/finish_1.png\" }],\n    extra: [{ name: \"Экстра 1\", image: \"/assets/extra/extra_1.png\" }],\n}; "],"names":[],"mappings":";;;;AAAO,MAAM,mBAAmB;IAC5B,SAAS;IACT,OAAO;IACP,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,OAAO;IACP,QAAQ;IACR,OAAO;AACX;AAEO,MAAM,OAAO;IAChB,SAAS;QACL;YAAE,MAAM;YAAY,OAAO;QAA+B;QAC1D;YAAE,MAAM;YAAY,OAAO;QAA+B;QAC1D;YAAE,MAAM;YAAY,OAAO;QAA+B;KAC7D;IACD,OAAO;QACH;YAAE,MAAM;YAAU,OAAO;QAA4B;QACrD;YAAE,MAAM;YAAO,OAAO;QAA4B;KACrD;IACD,QAAQ;QACJ;YAAE,MAAM;YAAU,OAAO;QAA2B;QACpD;YAAE,MAAM;YAAS,OAAO;QAA4B;QACpD;YAAE,MAAM;YAAS,OAAO;QAA2B;QACnD;YAAE,MAAM;YAAW,OAAO;QAA6B;QACvD;YAAE,MAAM;YAAW,OAAO;QAA4B;QACtD;YAAE,MAAM;YAAY,OAAO;QAA2B;KACzD;IACD,QAAQ;QACJ;YAAE,MAAM;YAAY,OAAO;QAA6B;QACxD;YAAE,MAAM;YAAY,OAAO;QAA6B;QACxD;YAAE,MAAM;YAAY,OAAO;QAA6B;KAC3D;IACD,OAAO;QACH;YAAE,MAAM;YAAU,OAAO;QAA4B;QACrD;YAAE,MAAM;YAAU,OAAO;QAA4B;QACrD;YAAE,MAAM;YAAU,OAAO;QAA4B;QACrD;YAAE,MAAM;YAAU,OAAO;QAA4B;KACxD;IACD,OAAO;QACH;YAAE,MAAM;YAAY,OAAO;QAA2B;QACtD;YAAE,MAAM;YAAY,OAAO;QAA2B;QACtD;YAAE,MAAM;YAAY,OAAO;QAA2B;QACtD;YAAE,MAAM;YAAY,OAAO;QAA2B;KACzD;IACD,QAAQ;QAAC;YAAE,MAAM;YAAW,OAAO;QAA8B;KAAE;IACnE,OAAO;QAAC;YAAE,MAAM;YAAY,OAAO;QAA4B;KAAE;AACrE","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file:///Users/pavelpetakov/%D0%9F%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B/MazeGenerator2/src/components/LeftPanel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Levels, PlacingObject } from '@/app/page';\nimport { data, objectCategories } from '@/lib/data';\nimport Image from 'next/image';\nimport { ObjectCategory } from './RightPanel';\nimport {\n  Stack,\n  Title,\n  Button,\n  NavLink,\n  UnstyledButton,\n  Group,\n  Text,\n  NumberInput,\n  Box,\n  Divider,\n  Paper,\n  Checkbox,\n} from '@mantine/core';\n\nconst SIZABLE_CATEGORIES: ObjectCategory[] = ['islands', 'start', 'fruits', 'stones', 'water', 'trees', 'finish', 'extra'];\nconst SINGULAR_RUSSIAN_MAP: Partial<Record<ObjectCategory, string>> = {\n    fruits: 'фрукт',\n    stones: 'камень',\n    trees: 'дерево',\n    finish: 'финиш',\n    extra: 'экстра',\n    water: 'объект',\n};\nconst SINGULAR_ENGLISH_MAP: Partial<Record<ObjectCategory, string>> = {\n    fruits: 'fruit',\n    stones: 'stone',\n    trees: 'tree',\n    finish: 'finish',\n    extra: 'extra',\n    water: 'water',\n};\n\nexport type LeftPanelContent = 'islands' | 'settings' | 'levels' | ObjectCategory | null;\n\ninterface LeftPanelProps {\n  content: LeftPanelContent;\n  setContent: (content: LeftPanelContent) => void;\n  levels: Levels;\n  currentLevelName: string;\n  loadLevel: (name: string) => void;\n  onCreateLevel: () => void;\n  canvasSize: { width: number; height: number };\n  setCanvasSize: (size: { width: number; height: number }) => void;\n  placingObject: PlacingObject | null;\n  setPlacingObject: (obj: PlacingObject | null) => void;\n  islandDimensions: Record<string, { width: number; height: number }>;\n  onIslandDimensionChange: (name: string, size: { width: number; height: number }) => void;\n  startDimensions: Record<string, { width: number; height: number }>;\n  onStartDimensionChange: (name: string, size: { width: number; height: number }) => void;\n  fruitDimensions: Record<string, { width: number; height: number }>;\n  onFruitDimensionChange: (name: string, size: { width: number; height: number }) => void;\n  stoneDimensions: Record<string, { width: number; height: number }>;\n  onStoneDimensionChange: (name: string, size: { width: number; height: number }) => void;\n  waterDimensions: Record<string, { width: number; height: number }>;\n  onWaterDimensionChange: (name: string, size: { width: number; height: number }) => void;\n  treeDimensions: Record<string, { width: number; height: number }>;\n  onTreeDimensionChange: (name: string, size: { width: number; height: number }) => void;\n  finishDimensions: Record<string, { width: number; height: number }>;\n  onFinishDimensionChange: (name: string, size: { width: number; height: number }) => void;\n  extraDimensions: Record<string, { width: number; height: number }>;\n  onExtraDimensionChange: (name: string, size: { width: number; height: number }) => void;\n}\n\nconst LeftPanel: React.FC<LeftPanelProps> = ({\n  content,\n  setContent,\n  levels,\n  currentLevelName,\n  loadLevel,\n  onCreateLevel,\n  canvasSize,\n  setCanvasSize,\n  placingObject,\n  setPlacingObject,\n  islandDimensions,\n  onIslandDimensionChange,\n  startDimensions,\n  onStartDimensionChange,\n  fruitDimensions,\n  onFruitDimensionChange,\n  stoneDimensions,\n  onStoneDimensionChange,\n  waterDimensions,\n  onWaterDimensionChange,\n  treeDimensions,\n  onTreeDimensionChange,\n  finishDimensions,\n  onFinishDimensionChange,\n  extraDimensions,\n  onExtraDimensionChange,\n}) => {\n  const [selectedCategory, setSelectedCategory] = useState<ObjectCategory | null>('islands');\n  const [selectedItemForSizing, setSelectedItemForSizing] = useState<string | null>(null);\n  const [keepAspectRatio, setKeepAspectRatio] = useState(true);\n  const [itemSize, setItemSize] = useState<{ width: number; height: number }>({ width: 0, height: 0 });\n\n  useEffect(() => {\n    setSelectedItemForSizing(null);\n  }, [selectedCategory]);\n\n  const handleItemClick = (item: { name: string; image: string }) => {\n    if (placingObject?.name === item.name) {\n      setPlacingObject(null);\n      setSelectedItemForSizing(null);\n    } else {\n      const img = new window.Image();\n      img.src = item.image;\n      img.onload = () => {\n        let width, height;\n        const isIsland = selectedCategory === 'islands';\n        const isStart = selectedCategory === 'start';\n        const isFruit = selectedCategory === 'fruits';\n        const isStone = selectedCategory === 'stones';\n        const isWater = selectedCategory === 'water';\n        const isTree = selectedCategory === 'trees';\n        const isFinish = selectedCategory === 'finish';\n        const isExtra = selectedCategory === 'extra';\n        \n        let dimensions = fruitDimensions;\n        if (isIsland) dimensions = islandDimensions;\n        if (isStart) dimensions = startDimensions;\n        if (isStone) dimensions = stoneDimensions;\n        if (isWater) dimensions = waterDimensions;\n        if (isTree) dimensions = treeDimensions;\n        if (isFinish) dimensions = finishDimensions;\n        if (isExtra) dimensions = extraDimensions;\n\n        const savedDim = dimensions[item.name];\n\n        if ((isIsland || isStart || isFruit || isStone || isWater || isTree || isFinish || isExtra) && savedDim) {\n          width = savedDim.width;\n          height = savedDim.height;\n        } else if (isIsland || isStart || isFruit || isStone || isWater || isTree || isFinish || isExtra) {\n          width = 64;\n          height = 64;\n        } else {\n          const MAX_DIM = 128;\n          const scale = Math.min(1, MAX_DIM / img.naturalWidth, MAX_DIM / img.naturalHeight);\n          width = img.naturalWidth * scale;\n          height = img.naturalHeight * scale;\n        }\n\n        setPlacingObject({\n          ...item,\n          width,\n          height,\n          originalWidth: img.naturalWidth,\n          originalHeight: img.naturalHeight,\n        } as PlacingObject);\n\n        if (isIsland || isStart || isFruit || isStone || isWater || isTree || isFinish || isExtra) {\n          setSelectedItemForSizing(item.name);\n          setItemSize({ width, height });\n        } else {\n          setSelectedItemForSizing(null);\n        }\n      };\n    }\n  };\n\n  const handleSizeChange = (key: 'width' | 'height', value: string | number) => {\n    const numValue = Number(value);\n    if (!isNaN(numValue) && numValue > 0) {\n      setCanvasSize({ ...canvasSize, [key]: numValue });\n    }\n  };\n\n  const handleDimensionChange = (\n    key: 'width' | 'height',\n    value: string | number,\n    category: 'islands' | 'start' | 'fruits' | 'stones' | 'water' | 'trees' | 'finish' | 'extra'\n  ) => {\n    const numValue = Number(value);\n    if (selectedItemForSizing && !isNaN(numValue) && numValue > 0) {\n      if (keepAspectRatio) {\n        const dimensions = { islandDimensions, startDimensions, fruitDimensions, stoneDimensions, waterDimensions, treeDimensions, finishDimensions, extraDimensions };\n        const dimKey = `${category}Dimensions` as keyof typeof dimensions;\n        const originalDim = dimensions[dimKey][selectedItemForSizing];\n        const ratio = originalDim ? originalDim.width / originalDim.height : 1;\n\n        if (key === 'width') {\n          setItemSize({ width: numValue, height: Math.round(numValue / ratio) });\n        } else {\n          setItemSize({ width: Math.round(numValue * ratio), height: numValue });\n        }\n      } else {\n        setItemSize((prev) => ({ ...prev, [key]: numValue }));\n      }\n    }\n  };\n\n  const handleDimensionSave = () => {\n    if (selectedItemForSizing && selectedCategory) {\n      const changeHandlers = {\n        islands: onIslandDimensionChange,\n        start: onStartDimensionChange,\n        fruits: onFruitDimensionChange,\n        stones: onStoneDimensionChange,\n        water: onWaterDimensionChange,\n        trees: onTreeDimensionChange,\n        finish: onFinishDimensionChange,\n        extra: onExtraDimensionChange,\n      };\n      const handler = changeHandlers[selectedCategory as keyof typeof changeHandlers];\n      if (handler) {\n        handler(selectedItemForSizing, itemSize);\n      }\n    }\n  };\n\n  const renderContent = () => {\n    if (content === 'levels') {\n      return (\n        <Stack p=\"md\">\n          <Button onClick={onCreateLevel} fullWidth>\n            Создать новый уровень\n          </Button>\n          <Stack gap=\"xs\" mt=\"sm\">\n            {Object.keys(levels).map((name) => (\n              <NavLink\n                key={name}\n                href=\"#\"\n                label={name}\n                active={currentLevelName === name}\n                onClick={() => loadLevel(name)}\n                variant=\"filled\"\n              />\n            ))}\n          </Stack>\n        </Stack>\n      );\n    }\n    \n    if (content === 'settings') {\n      return (\n        <Stack p=\"md\">\n          <Title order={4}>Настройки</Title>\n          <NumberInput\n            label=\"Ширина\"\n            value={canvasSize.width}\n            onChange={(value) => handleSizeChange('width', value)}\n          />\n          <NumberInput\n            label=\"Высота\"\n            value={canvasSize.height}\n            onChange={(value) => handleSizeChange('height', value)}\n          />\n        </Stack>\n      );\n    }\n\n    const categoryData = selectedCategory ? data[selectedCategory] : null;\n    const isSizable = selectedCategory && SIZABLE_CATEGORIES.includes(selectedCategory);\n\n    const randomItemName = selectedCategory ? `random_${SINGULAR_ENGLISH_MAP[selectedCategory] || selectedCategory}` : '';\n    const randomItemImage = selectedCategory ? `/assets/${selectedCategory}/random_${SINGULAR_ENGLISH_MAP[selectedCategory] || selectedCategory}.png` : '';\n    const randomItemAltText = selectedCategory ? `Случайный ${SINGULAR_RUSSIAN_MAP[selectedCategory] || objectCategories[selectedCategory]}` : '';\n\n    return (\n      <Stack p=\"md\" gap=\"lg\" style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n        <Box>\n          <Title order={4} mb=\"md\">Элементы</Title>\n          <Group>\n            {Object.entries(objectCategories).map(([key, name]) => (\n              <Button\n                key={key}\n                variant={selectedCategory === key ? 'filled' : 'light'}\n                onClick={() => setSelectedCategory(key as ObjectCategory)}\n                radius=\"md\"\n              >\n                {name}\n              </Button>\n            ))}\n          </Group>\n        </Box>\n\n        <Box style={{ flex: '1 1 auto', overflowY: 'auto' }}>\n          {selectedCategory && categoryData && (\n            <>\n              <Divider />\n              <div>\n                <Title order={4} tt=\"capitalize\" mt=\"lg\" mb=\"md\">\n                  {objectCategories[selectedCategory]}\n                </Title>\n                <Box\n                  style={{\n                    display: 'grid',\n                    gridTemplateColumns: 'repeat(3, 1fr)',\n                    gap: '0.5rem',\n                  }}\n                >\n                  {categoryData.map((item: any) => (\n                    <UnstyledButton\n                      key={item.name}\n                      p=\"xs\"\n                      style={{\n                        borderRadius: 'var(--mantine-radius-md)',\n                        border: placingObject?.name === item.name ? '2px solid var(--mantine-color-blue-6)' : '2px solid transparent',\n                      }}\n                      className=\"hover:bg-gray-100\"\n                      onClick={() => handleItemClick(item)}\n                    >\n                      <Stack align=\"center\" gap=\"xs\">\n                        <Image src={item.image} alt={item.name} width={56} height={56} />\n                      </Stack>\n                    </UnstyledButton>\n                  ))}\n                  {isSizable && selectedCategory && (\n                    <UnstyledButton\n                      key={randomItemName}\n                      p=\"xs\"\n                      style={{\n                        borderRadius: 'var(--mantine-radius-md)',\n                        border: placingObject?.name === randomItemName ? '2px solid var(--mantine-color-blue-6)' : '2px solid transparent',\n                      }}\n                      className=\"hover:bg-gray-100\"\n                      onClick={() => {\n                        if (placingObject?.name === randomItemName) {\n                          setPlacingObject(null);\n                          setSelectedItemForSizing(null);\n                        } else {\n                          const allDimensions = {\n                              islands: islandDimensions,\n                              start: startDimensions,\n                              fruits: fruitDimensions,\n                              stones: stoneDimensions,\n                              water: waterDimensions,\n                              trees: treeDimensions,\n                              finish: finishDimensions,\n                              extra: extraDimensions,\n                          };\n                          const categoryKey = selectedCategory as keyof typeof allDimensions;\n                          const categoryDimensions = allDimensions[categoryKey];\n                          const savedDim = categoryDimensions ? categoryDimensions[randomItemName] : undefined;\n\n                          const width = savedDim?.width || 64;\n                          const height = savedDim?.height || 64;\n                          setPlacingObject({\n                            name: randomItemName,\n                            image: randomItemImage,\n                            width,\n                            height,\n                            originalWidth: width,\n                            originalHeight: height,\n                          });\n                          setSelectedItemForSizing(randomItemName);\n                        }\n                      }}\n                    >\n                      <Stack align=\"center\" gap=\"xs\">\n                        <Image src={randomItemImage} alt={randomItemAltText} width={56} height={56} />\n                      </Stack>\n                    </UnstyledButton>\n                  )}\n                </Box>\n              </div>\n            </>\n          )}\n        </Box>\n\n        {selectedItemForSizing && selectedCategory && SIZABLE_CATEGORIES.includes(selectedCategory) && (\n          <Box>\n            <Divider />\n            <Title order={4} tt=\"capitalize\" mt=\"lg\" mb=\"md\">\n              Размер для: {selectedItemForSizing}\n            </Title>\n            <Group>\n              <NumberInput\n                label=\"Ширина\"\n                value={itemSize.width}\n                onChange={(value) =>\n                  handleDimensionChange(\n                    'width',\n                    value,\n                    selectedCategory as 'islands' | 'start' | 'fruits' | 'stones' | 'water' | 'trees' | 'finish' | 'extra'\n                  )\n                }\n              />\n              <NumberInput\n                label=\"Высота\"\n                value={itemSize.height}\n                onChange={(value) =>\n                  handleDimensionChange(\n                    'height',\n                    value,\n                    selectedCategory as 'islands' | 'start' | 'fruits' | 'stones' | 'water' | 'trees' | 'finish' | 'extra'\n                  )\n                }\n              />\n            </Group>\n            <Checkbox\n              mt=\"md\"\n              checked={keepAspectRatio}\n              onChange={(event) => setKeepAspectRatio(event.currentTarget.checked)}\n              label=\"Сохранять пропорции\"\n            />\n            <Button mt=\"md\" onClick={handleDimensionSave}>Сохранить</Button>\n          </Box>\n        )}\n      </Stack>\n    );\n  };\n\n  return <Box py=\"sm\">{renderContent()}</Box>;\n};\n\nexport default LeftPanel;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 783, "column": 0}, "map": {"version":3,"sources":["file:///Users/pavelpetakov/%D0%9F%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B/MazeGenerator2/src/components/ObjectTree.tsx"],"sourcesContent":["import React from 'react';\nimport { MapObject } from '@/app/page';\nimport { UnstyledButton, Group, Text } from '@mantine/core';\n\ninterface ObjectTreeProps {\n  objects: MapObject[];\n  onSelectObject: (object: MapObject) => void;\n  selectedObject: MapObject | null;\n}\n\nconst ObjectTree: React.FC<ObjectTreeProps> = ({ objects, onSelectObject, selectedObject }) => {\n  const buildTree = (items: MapObject[]): MapObject[] => {\n    const itemMap = new Map<string, MapObject>();\n    items.forEach(item => {\n      itemMap.set(item.id, { ...item, children: [] });\n    });\n\n    const tree: MapObject[] = [];\n    items.forEach(item => {\n      if (item.parentId && itemMap.has(item.parentId)) {\n        const parent = itemMap.get(item.parentId);\n        parent?.children?.push(itemMap.get(item.id)!);\n      } else {\n        tree.push(itemMap.get(item.id)!);\n      }\n    });\n\n    return tree;\n  };\n\n  const objectTree = buildTree(objects);\n\n  const renderTree = (nodes: MapObject[]) => (\n    <div style={{ paddingLeft: 16 }}>\n      {nodes.map(node => (\n        <div key={node.id}>\n          <UnstyledButton\n            onClick={() => onSelectObject(node)}\n            style={{\n              display: 'block',\n              width: '100%',\n              padding: '4px 8px',\n              borderRadius: '4px',\n              backgroundColor: selectedObject?.id === node.id ? '#e7f5ff' : 'transparent',\n              color: selectedObject?.id === node.id ? '#1971c2' : '#000',\n            }}\n          >\n            <Group>\n              <Text size=\"sm\">{node.name}</Text>\n            </Group>\n          </UnstyledButton>\n          {node.children && node.children.length > 0 && renderTree(node.children)}\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <div>\n      {renderTree(objectTree)}\n    </div>\n  );\n};\n\nexport default ObjectTree; "],"names":[],"mappings":";;;;AAEA;AAAA;AAAA;;;AAQA,MAAM,aAAwC,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE;IACxF,MAAM,YAAY,CAAC;QACjB,MAAM,UAAU,IAAI;QACpB,MAAM,OAAO,CAAC,CAAA;YACZ,QAAQ,GAAG,CAAC,KAAK,EAAE,EAAE;gBAAE,GAAG,IAAI;gBAAE,UAAU,EAAE;YAAC;QAC/C;QAEA,MAAM,OAAoB,EAAE;QAC5B,MAAM,OAAO,CAAC,CAAA;YACZ,IAAI,KAAK,QAAQ,IAAI,QAAQ,GAAG,CAAC,KAAK,QAAQ,GAAG;gBAC/C,MAAM,SAAS,QAAQ,GAAG,CAAC,KAAK,QAAQ;gBACxC,QAAQ,UAAU,KAAK,QAAQ,GAAG,CAAC,KAAK,EAAE;YAC5C,OAAO;gBACL,KAAK,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,EAAE;YAC/B;QACF;QAEA,OAAO;IACT;IAEA,MAAM,aAAa,UAAU;IAE7B,MAAM,aAAa,CAAC,sBAClB,8OAAC;YAAI,OAAO;gBAAE,aAAa;YAAG;sBAC3B,MAAM,GAAG,CAAC,CAAA,qBACT,8OAAC;;sCACC,8OAAC,2LAAA,CAAA,iBAAc;4BACb,SAAS,IAAM,eAAe;4BAC9B,OAAO;gCACL,SAAS;gCACT,OAAO;gCACP,SAAS;gCACT,cAAc;gCACd,iBAAiB,gBAAgB,OAAO,KAAK,EAAE,GAAG,YAAY;gCAC9D,OAAO,gBAAgB,OAAO,KAAK,EAAE,GAAG,YAAY;4BACtD;sCAEA,cAAA,8OAAC,yKAAA,CAAA,QAAK;0CACJ,cAAA,8OAAC,uKAAA,CAAA,OAAI;oCAAC,MAAK;8CAAM,KAAK,IAAI;;;;;;;;;;;;;;;;wBAG7B,KAAK,QAAQ,IAAI,KAAK,QAAQ,CAAC,MAAM,GAAG,KAAK,WAAW,KAAK,QAAQ;;mBAhB9D,KAAK,EAAE;;;;;;;;;;IAsBvB,qBACE,8OAAC;kBACE,WAAW;;;;;;AAGlB;uCAEe","debugId":null}},
    {"offset": {"line": 875, "column": 0}, "map": {"version":3,"sources":["file:///Users/pavelpetakov/%D0%9F%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B/MazeGenerator2/src/components/RightPanel.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { MapObject } from '@/app/page';\nimport {\n  Stack,\n  Title,\n  Text,\n  TextInput,\n  NumberInput,\n  Checkbox,\n  Button,\n  Paper,\n  Divider,\n  Group,\n  ActionIcon,\n  SegmentedControl,\n} from '@mantine/core';\nimport { IconTrash } from '@tabler/icons-react';\nimport ObjectTree from './ObjectTree';\n\nexport type ObjectCategory = 'islands' | 'start' | 'fruits' | 'stones' | 'water' | 'trees' | 'finish' | 'extra';\n\ninterface RightPanelProps {\n  mapObjects: MapObject[];\n  selectedObject: MapObject | null;\n  onSelectObject: (object: MapObject) => void;\n  onUpdateObject: (updatedObject: MapObject) => void;\n  onDeleteObject: (id: string) => void;\n  leftPanelContent: 'islands' | 'settings' | 'levels' | ObjectCategory | null;\n  canvasSize: { width: number; height: number };\n  setCanvasSize: (size: { width: number; height: number }) => void;\n  keepAspectRatio: boolean;\n  setKeepAspectRatio: (value: boolean) => void;\n}\n\nconst RightPanel: React.FC<RightPanelProps> = ({\n  mapObjects,\n  selectedObject,\n  onSelectObject,\n  onUpdateObject,\n  onDeleteObject,\n  leftPanelContent,\n  canvasSize,\n  setCanvasSize,\n  keepAspectRatio,\n  setKeepAspectRatio,\n}) => {\n  const [view, setView] = useState<'properties' | 'tree'>('properties');\n\n  const handleInputChange = (id: string, value: any) => {\n    if (!selectedObject) return;\n\n    let newObject: MapObject = { ...selectedObject, [id]: value };\n\n    if (keepAspectRatio) {\n      if (id === 'width' && selectedObject.originalWidth && selectedObject.originalHeight) {\n        const aspectRatio = selectedObject.originalHeight / selectedObject.originalWidth;\n        newObject.height = Number(value) * aspectRatio;\n      } else if (id === 'height' && selectedObject.originalWidth && selectedObject.originalHeight) {\n        const aspectRatio = selectedObject.originalWidth / selectedObject.originalHeight;\n        newObject.width = Number(value) * aspectRatio;\n      } else if (id === 'widthPercent' && selectedObject.originalWidth && selectedObject.originalHeight) {\n        newObject.height = selectedObject.originalHeight * (Number(value) / 100);\n      } else if (id === 'heightPercent' && selectedObject.originalWidth && selectedObject.originalHeight) {\n        newObject.width = selectedObject.originalWidth * (Number(value) / 100);\n      }\n    }\n\n    if (id === 'widthPercent' && selectedObject.originalWidth) {\n      newObject.width = selectedObject.originalWidth * (Number(value) / 100);\n    } else if (id === 'heightPercent' && selectedObject.originalHeight) {\n      newObject.height = selectedObject.originalHeight * (Number(value) / 100);\n    }\n    \n    onUpdateObject(newObject);\n  };\n\n  const handleCanvasSizeChange = (id: 'width' | 'height', value: number | string) => {\n    const newSize = {\n      ...canvasSize,\n      [id]: Number(value) || 0,\n    };\n    setCanvasSize(newSize);\n  };\n\n  if (leftPanelContent === 'levels') {\n    return (\n      <Stack>\n        <Title order={4}>Размеры уровня</Title>\n        <NumberInput\n          label=\"Ширина\"\n          id=\"width\"\n          value={canvasSize.width}\n          onChange={(value) => handleCanvasSizeChange('width', value)}\n          min={100}\n        />\n        <NumberInput\n          label=\"Высота\"\n          id=\"height\"\n          value={canvasSize.height}\n          onChange={(value) => handleCanvasSizeChange('height', value)}\n          min={100}\n        />\n      </Stack>\n    );\n  }\n\n  return (\n    <Stack>\n      <SegmentedControl\n        value={view}\n        onChange={(value) => setView(value as 'properties' | 'tree')}\n        data={[\n          { label: 'Свойства', value: 'properties' },\n          { label: 'Дерево', value: 'tree' },\n        ]}\n        fullWidth\n      />\n\n      {view === 'tree' && (\n        <Stack>\n          <Title order={4}>Дерево объектов</Title>\n          <ObjectTree objects={mapObjects} onSelectObject={onSelectObject} selectedObject={selectedObject} />\n        </Stack>\n      )}\n      \n      {view === 'properties' && (\n        <>\n          <Group justify=\"space-between\">\n            <Title order={4}>Свойства объекта</Title>\n            {selectedObject && (\n              <ActionIcon variant=\"light\" color=\"red\" onClick={() => onDeleteObject(selectedObject.id)}>\n                <IconTrash size={18} />\n              </ActionIcon>\n            )}\n          </Group>\n          \n          {!selectedObject ? (\n            <Text c=\"dimmed\">Объект не выбран</Text>\n          ) : (\n            <>\n              <TextInput\n                label=\"Имя\"\n                value={selectedObject.name}\n                onChange={(event) => onUpdateObject({ ...selectedObject, name: event.currentTarget.value })}\n              />\n              <NumberInput\n                label=\"Ширина (пикс.)\"\n                id=\"width\"\n                value={Math.round(selectedObject.width)}\n                onChange={(value) => handleInputChange('width', value)}\n                min={1}\n              />\n              <NumberInput\n                label=\"Высота (пикс.)\"\n                id=\"height\"\n                value={Math.round(selectedObject.height)}\n                onChange={(value) => handleInputChange('height', value)}\n                min={1}\n              />\n              {selectedObject.originalWidth && (\n                <NumberInput\n                  label=\"Ширина (%)\"\n                  value={Math.round((selectedObject.width / selectedObject.originalWidth) * 100)}\n                  onChange={(value) => handleInputChange('widthPercent', value)}\n                  min={1}\n                />\n              )}\n              {selectedObject.originalHeight && (\n                <NumberInput\n                  label=\"Высота (%)\"\n                  value={Math.round((selectedObject.height / selectedObject.originalHeight) * 100)}\n                  onChange={(value) => handleInputChange('heightPercent', value)}\n                  min={1}\n                />\n              )}\n              <Checkbox\n                checked={keepAspectRatio}\n                onChange={(event) => setKeepAspectRatio(event.currentTarget.checked)}\n                label=\"Сохранять пропорции\"\n              />\n              <Group grow>\n                <Button \n                  variant=\"default\" \n                  onClick={() => onUpdateObject({ ...selectedObject, flipX: !selectedObject.flipX })}>\n                    Отразить X\n                </Button>\n                <Button \n                  variant=\"default\" \n                  onClick={() => onUpdateObject({ ...selectedObject, flipY: !selectedObject.flipY })}>\n                    Отразить Y\n                </Button>\n              </Group>\n              <Checkbox\n                id=\"isLocked\"\n                label=\"Заблокировать\"\n                checked={selectedObject.isLocked}\n                onChange={(event) => handleInputChange('isLocked', event.currentTarget.checked)}\n              />\n            </>\n          )}\n        </>\n      )}\n    </Stack>\n  );\n};\n\nexport default RightPanel;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1186, "column": 0}, "map": {"version":3,"sources":["file:///Users/pavelpetakov/%D0%9F%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B/MazeGenerator2/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState, useRef } from 'react';\nimport Toolbar from '@/components/Toolbar';\nimport LeftPanel from '@/components/LeftPanel';\nimport RightPanel, { ObjectCategory } from '@/components/RightPanel';\nimport dynamic from 'next/dynamic';\nimport { notifications } from '@mantine/notifications';\n\nconst Canvas = dynamic(() => import('@/components/Canvas'), {\n  ssr: false,\n  loading: () => <div className=\"flex-grow flex justify-center items-center bg-gray-100\"><p>Loading Canvas...</p></div>\n});\n\nexport interface MapObject {\n  id: string;\n  name: string;\n  image: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  originalWidth?: number;\n  originalHeight?: number;\n  flipX: boolean;\n  flipY: boolean;\n  isLocked: boolean;\n  parentId?: string;\n  children?: MapObject[];\n}\n\nexport interface PlacingObject {\n  name: string;\n  image: string;\n  width: number;\n  height: number;\n  originalWidth: number;\n  originalHeight: number;\n}\n\nexport type Tool = 'pointer' | 'placing' | 'map';\n\nexport interface Levels {\n  [key: string]: {\n    objects: MapObject[];\n    dimensions: { width: number, height: number };\n  }\n}\n\n\nexport default function Home() {\n  const [levels, setLevels] = useState<Levels>({});\n  const [currentLevelName, setCurrentLevelName] = useState('');\n  const [mapObjects, setMapObjects] = useState<MapObject[]>([]);\n  const [selectedObject, setSelectedObject] = useState<MapObject | null>(null);\n  const [activeTool, setActiveTool] = useState<Tool>('pointer');\n  const [leftPanelContent, setLeftPanelContent] = useState<ObjectCategory | \"levels\" | \"settings\" | \"islands\" | null>('islands');\n  const [placingObject, setPlacingObject] = useState<PlacingObject | null>(null);\n  const [keepAspectRatio, setKeepAspectRatio] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  \n  const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 });\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n\n  const [islandDimensions, setIslandDimensions] = useState<Record<string, { width: number; height: number }>>({});\n  const [startDimensions, setStartDimensions] = useState<Record<string, { width: number; height: number }>>({});\n  const [fruitDimensions, setFruitDimensions] = useState<Record<string, { width: number; height: number }>>({});\n  const [stoneDimensions, setStoneDimensions] = useState<Record<string, { width: number; height: number }>>({});\n  const [waterDimensions, setWaterDimensions] = useState<Record<string, { width: number; height: number }>>({});\n  const [treeDimensions, setTreeDimensions] = useState<Record<string, { width: number; height: number }>>({});\n  const [finishDimensions, setFinishDimensions] = useState<Record<string, { width: number; height: number }>>({});\n  const [extraDimensions, setExtraDimensions] = useState<Record<string, { width: number; height: number }>>({});\n\n  const fetchLevels = async () => {\n    const response = await fetch('/api/levels');\n    const data = await response.json();\n    setLevels(data);\n    return data;\n  };\n\n  useEffect(() => {\n    const initLevels = async () => {\n      const data = await fetchLevels();\n      const levelNames = Object.keys(data);\n      const lastOpened = localStorage.getItem('maze-editor-last-level-name');\n      if (lastOpened && data[lastOpened]) {\n        loadLevel(lastOpened, data);\n      } else if (levelNames.length > 0) {\n        loadLevel(levelNames[0], data);\n      }\n    };\n    initLevels();\n  }, []);\n\n  useEffect(() => {\n    if (activeTool === 'map') {\n      setLeftPanelContent('levels');\n    } else if (activeTool === 'pointer' && leftPanelContent === 'levels') {\n      setLeftPanelContent('islands');\n    }\n  }, [activeTool]);\n\n  useEffect(() => {\n    const savedDimensions = localStorage.getItem('fruit-dimensions');\n    if (savedDimensions) {\n      setFruitDimensions(JSON.parse(savedDimensions));\n    }\n    const savedStoneDimensions = localStorage.getItem('stone-dimensions');\n    if (savedStoneDimensions) {\n      setStoneDimensions(JSON.parse(savedStoneDimensions));\n    }\n    const savedWaterDimensions = localStorage.getItem('water-dimensions');\n    if (savedWaterDimensions) {\n      setWaterDimensions(JSON.parse(savedWaterDimensions));\n    }\n    const savedTreeDimensions = localStorage.getItem('tree-dimensions');\n    if (savedTreeDimensions) {\n      setTreeDimensions(JSON.parse(savedTreeDimensions));\n    }\n    const savedFinishDimensions = localStorage.getItem('finish-dimensions');\n    if (savedFinishDimensions) {\n      setFinishDimensions(JSON.parse(savedFinishDimensions));\n    }\n    const savedExtraDimensions = localStorage.getItem('extra-dimensions');\n    if (savedExtraDimensions) {\n      setExtraDimensions(JSON.parse(savedExtraDimensions));\n    }\n    const savedIslandDimensions = localStorage.getItem('island-dimensions');\n    if (savedIslandDimensions) {\n      setIslandDimensions(JSON.parse(savedIslandDimensions));\n    }\n    const savedStartDimensions = localStorage.getItem('start-dimensions');\n    if (savedStartDimensions) {\n      setStartDimensions(JSON.parse(savedStartDimensions));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (placingObject) {\n      setActiveTool('placing');\n    } else if (activeTool === 'placing') {\n      setActiveTool('pointer');\n    }\n  }, [placingObject]);\n\n  const handleSetFruitDimension = (name: string, size: { width: number; height: number }) => {\n    const newDimensions = { ...fruitDimensions, [name]: size };\n    setFruitDimensions(newDimensions);\n    localStorage.setItem('fruit-dimensions', JSON.stringify(newDimensions));\n  };\n\n  const handleSetStoneDimension = (name: string, size: { width: number; height: number }) => {\n    const newDimensions = { ...stoneDimensions, [name]: size };\n    setStoneDimensions(newDimensions);\n    localStorage.setItem('stone-dimensions', JSON.stringify(newDimensions));\n  };\n\n  const handleSetWaterDimension = (name: string, size: { width: number; height: number }) => {\n    const newDimensions = { ...waterDimensions, [name]: size };\n    setWaterDimensions(newDimensions);\n    localStorage.setItem('water-dimensions', JSON.stringify(newDimensions));\n  };\n\n  const handleSetTreeDimension = (name: string, size: { width: number; height: number }) => {\n    const newDimensions = { ...treeDimensions, [name]: size };\n    setTreeDimensions(newDimensions);\n    localStorage.setItem('tree-dimensions', JSON.stringify(newDimensions));\n  };\n\n  const handleSetFinishDimension = (name: string, size: { width: number; height: number }) => {\n    const newDimensions = { ...finishDimensions, [name]: size };\n    setFinishDimensions(newDimensions);\n    localStorage.setItem('finish-dimensions', JSON.stringify(newDimensions));\n  };\n\n  const handleSetExtraDimension = (name: string, size: { width: number; height: number }) => {\n    const newDimensions = { ...extraDimensions, [name]: size };\n    setExtraDimensions(newDimensions);\n    localStorage.setItem('extra-dimensions', JSON.stringify(newDimensions));\n  };\n\n  const handleSetIslandDimension = (name: string, size: { width: number; height: number }) => {\n    const newDimensions = { ...islandDimensions, [name]: size };\n    setIslandDimensions(newDimensions);\n    localStorage.setItem('island-dimensions', JSON.stringify(newDimensions));\n  };\n\n  const handleSetStartDimension = (name: string, size: { width: number; height: number }) => {\n    const newDimensions = { ...startDimensions, [name]: size };\n    setStartDimensions(newDimensions);\n    localStorage.setItem('start-dimensions', JSON.stringify(newDimensions));\n  };\n\n  const loadLevel = (name: string, allLevels: Levels) => {\n    const levelData = allLevels[name];\n    if (levelData) {\n      setMapObjects(levelData.objects || []);\n      setCanvasSize(levelData.dimensions || { width: 800, height: 600 });\n      setCurrentLevelName(name);\n      setSelectedObject(null);\n      localStorage.setItem('maze-editor-last-level-name', name);\n    }\n  };\n\n  const handleCreateLevel = async () => {\n    const name = prompt(`Введите имя нового уровня:`, `Уровень ${Object.keys(levels).length + 1}`);\n    if (name) {\n        if (levels[name]) {\n            alert('Уровень с таким именем уже существует.');\n            return;\n        }\n        \n        const newLevelData = {\n            objects: [],\n            dimensions: { width: 800, height: 600 }\n        };\n\n        try {\n            await fetch('/api/save-level', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ name, data: newLevelData })\n            });\n            const updatedLevels = await fetchLevels();\n            loadLevel(name, updatedLevels);\n        } catch (error) {\n            console.error('Ошибка при создании уровня:', error);\n            alert(`Не удалось создать уровень: ${error}`);\n        }\n    }\n  };\n\n  const handleToolSelect = (tool: Tool) => {\n    if (tool === 'pointer') {\n      setPlacingObject(null);\n    }\n    setActiveTool(tool);\n  };\n\n  const handleSaveLevel = async () => {\n    if (!currentLevelName) {\n        notifications.show({\n          title: 'Ошибка',\n          message: 'Не выбран уровень для сохранения.',\n          color: 'red',\n        });\n        return;\n    }\n    setIsSaving(true);\n    const levelData = {\n        objects: mapObjects,\n        dimensions: canvasSize\n    };\n    try {\n        await fetch('/api/save-level', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ name: currentLevelName, data: levelData })\n        });\n        notifications.show({\n            title: 'Сохранено',\n            message: `Уровень \"${currentLevelName}\" успешно сохранен.`,\n            color: 'green',\n        });\n    } catch (error) {\n        console.error('Ошибка при сохранении уровня:', error);\n        notifications.show({\n            title: 'Ошибка сохранения',\n            message: `Не удалось сохранить уровень: ${error}`,\n            color: 'red',\n        });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleUpdateObject = (updatedAttrs: Partial<MapObject>) => {\n    if (!updatedAttrs.id) return;\n    const newMapObjects = mapObjects.map(obj => {\n      if (obj.id === updatedAttrs.id) {\n        return { ...obj, ...updatedAttrs };\n      }\n      return obj;\n    });\n    setMapObjects(newMapObjects);\n\n    if (selectedObject && selectedObject.id === updatedAttrs.id) {\n      setSelectedObject(prev => ({ ...prev!, ...updatedAttrs }));\n    }\n  };\n\n  const handleDeleteObject = (id: string) => {\n    setMapObjects(mapObjects.filter(obj => obj.id !== id));\n    setSelectedObject(null);\n  };\n\n  return (\n    <>\n      <div className=\"app-container flex flex-col h-screen\">\n        <main className=\"main-content flex flex-grow overflow-hidden\">\n          <div className=\"left-panel w-[250px] bg-white border-r border-gray-300 flex-shrink-0 flex\">\n            <LeftPanel\n              content={leftPanelContent}\n              setContent={setLeftPanelContent}\n              levels={levels}\n              currentLevelName={currentLevelName}\n              loadLevel={(name: string) => loadLevel(name, levels)}\n              onCreateLevel={handleCreateLevel}\n              canvasSize={canvasSize}\n              setCanvasSize={setCanvasSize}\n              placingObject={placingObject}\n              setPlacingObject={setPlacingObject}\n              islandDimensions={islandDimensions}\n              onIslandDimensionChange={handleSetIslandDimension}\n              startDimensions={startDimensions}\n              onStartDimensionChange={handleSetStartDimension}\n              fruitDimensions={fruitDimensions}\n              onFruitDimensionChange={handleSetFruitDimension}\n              stoneDimensions={stoneDimensions}\n              onStoneDimensionChange={handleSetStoneDimension}\n              waterDimensions={waterDimensions}\n              onWaterDimensionChange={handleSetWaterDimension}\n              treeDimensions={treeDimensions}\n              onTreeDimensionChange={handleSetTreeDimension}\n              finishDimensions={finishDimensions}\n              onFinishDimensionChange={handleSetFinishDimension}\n              extraDimensions={extraDimensions}\n              onExtraDimensionChange={handleSetExtraDimension}\n            />\n          </div>\n          <div className=\"center-panel flex-grow flex flex-col min-w-0\">\n            <Toolbar\n              activeTool={activeTool}\n              onToolSelect={handleToolSelect}\n              onSave={handleSaveLevel}\n              isSaving={isSaving}\n            />\n            <div className=\"canvas-container flex-grow overflow-auto bg-gray-100 p-5 flex justify-center items-center\">\n              <Canvas\n                mapObjects={mapObjects}\n                setMapObjects={setMapObjects}\n                selectedObject={selectedObject}\n                setSelectedObject={setSelectedObject}\n                canvasSize={canvasSize}\n                placingObject={placingObject}\n                setPlacingObject={setPlacingObject}\n                keepAspectRatio={keepAspectRatio}\n                onUpdateObject={handleUpdateObject}\n              />\n            </div>\n          </div>\n          <div className=\"right-panel w-[250px] bg-white border-l border-gray-300 p-4 overflow-y-auto flex-shrink-0\">\n            <RightPanel\n              mapObjects={mapObjects}\n              selectedObject={selectedObject}\n              onSelectObject={setSelectedObject}\n              onUpdateObject={handleUpdateObject}\n              onDeleteObject={handleDeleteObject}\n              leftPanelContent={leftPanelContent}\n              canvasSize={canvasSize}\n              setCanvasSize={setCanvasSize}\n              keepAspectRatio={keepAspectRatio}\n              setKeepAspectRatio={setKeepAspectRatio}\n            />\n          </div>\n        </main>\n      </div>\n    </>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAPA;;;;;;;;AASA,MAAM,SAAS,CAAA,GAAA,+JAAA,CAAA,UAAO,AAAD;;;;;;IACnB,KAAK;IACL,SAAS,kBAAM,8OAAC;YAAI,WAAU;sBAAyD,cAAA,8OAAC;0BAAE;;;;;;;;;;;;AAuC7E,SAAS;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,CAAC;IAC9C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe,EAAE;IAC5D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoB;IACvE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAQ;IACnD,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA6D;IACpH,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAwB;IACzE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,OAAO;QAAK,QAAQ;IAAI;IACvE,MAAM,qBAAqB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IAElD,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqD,CAAC;IAC7G,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqD,CAAC;IAC3G,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqD,CAAC;IAC3G,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqD,CAAC;IAC3G,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqD,CAAC;IAC3G,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqD,CAAC;IACzG,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqD,CAAC;IAC7G,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqD,CAAC;IAE3G,MAAM,cAAc;QAClB,MAAM,WAAW,MAAM,MAAM;QAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,UAAU;QACV,OAAO;IACT;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,aAAa;YACjB,MAAM,OAAO,MAAM;YACnB,MAAM,aAAa,OAAO,IAAI,CAAC;YAC/B,MAAM,aAAa,aAAa,OAAO,CAAC;YACxC,IAAI,cAAc,IAAI,CAAC,WAAW,EAAE;gBAClC,UAAU,YAAY;YACxB,OAAO,IAAI,WAAW,MAAM,GAAG,GAAG;gBAChC,UAAU,UAAU,CAAC,EAAE,EAAE;YAC3B;QACF;QACA;IACF,GAAG,EAAE;IAEL,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,eAAe,OAAO;YACxB,oBAAoB;QACtB,OAAO,IAAI,eAAe,aAAa,qBAAqB,UAAU;YACpE,oBAAoB;QACtB;IACF,GAAG;QAAC;KAAW;IAEf,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,kBAAkB,aAAa,OAAO,CAAC;QAC7C,IAAI,iBAAiB;YACnB,mBAAmB,KAAK,KAAK,CAAC;QAChC;QACA,MAAM,uBAAuB,aAAa,OAAO,CAAC;QAClD,IAAI,sBAAsB;YACxB,mBAAmB,KAAK,KAAK,CAAC;QAChC;QACA,MAAM,uBAAuB,aAAa,OAAO,CAAC;QAClD,IAAI,sBAAsB;YACxB,mBAAmB,KAAK,KAAK,CAAC;QAChC;QACA,MAAM,sBAAsB,aAAa,OAAO,CAAC;QACjD,IAAI,qBAAqB;YACvB,kBAAkB,KAAK,KAAK,CAAC;QAC/B;QACA,MAAM,wBAAwB,aAAa,OAAO,CAAC;QACnD,IAAI,uBAAuB;YACzB,oBAAoB,KAAK,KAAK,CAAC;QACjC;QACA,MAAM,uBAAuB,aAAa,OAAO,CAAC;QAClD,IAAI,sBAAsB;YACxB,mBAAmB,KAAK,KAAK,CAAC;QAChC;QACA,MAAM,wBAAwB,aAAa,OAAO,CAAC;QACnD,IAAI,uBAAuB;YACzB,oBAAoB,KAAK,KAAK,CAAC;QACjC;QACA,MAAM,uBAAuB,aAAa,OAAO,CAAC;QAClD,IAAI,sBAAsB;YACxB,mBAAmB,KAAK,KAAK,CAAC;QAChC;IACF,GAAG,EAAE;IAEL,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,eAAe;YACjB,cAAc;QAChB,OAAO,IAAI,eAAe,WAAW;YACnC,cAAc;QAChB;IACF,GAAG;QAAC;KAAc;IAElB,MAAM,0BAA0B,CAAC,MAAc;QAC7C,MAAM,gBAAgB;YAAE,GAAG,eAAe;YAAE,CAAC,KAAK,EAAE;QAAK;QACzD,mBAAmB;QACnB,aAAa,OAAO,CAAC,oBAAoB,KAAK,SAAS,CAAC;IAC1D;IAEA,MAAM,0BAA0B,CAAC,MAAc;QAC7C,MAAM,gBAAgB;YAAE,GAAG,eAAe;YAAE,CAAC,KAAK,EAAE;QAAK;QACzD,mBAAmB;QACnB,aAAa,OAAO,CAAC,oBAAoB,KAAK,SAAS,CAAC;IAC1D;IAEA,MAAM,0BAA0B,CAAC,MAAc;QAC7C,MAAM,gBAAgB;YAAE,GAAG,eAAe;YAAE,CAAC,KAAK,EAAE;QAAK;QACzD,mBAAmB;QACnB,aAAa,OAAO,CAAC,oBAAoB,KAAK,SAAS,CAAC;IAC1D;IAEA,MAAM,yBAAyB,CAAC,MAAc;QAC5C,MAAM,gBAAgB;YAAE,GAAG,cAAc;YAAE,CAAC,KAAK,EAAE;QAAK;QACxD,kBAAkB;QAClB,aAAa,OAAO,CAAC,mBAAmB,KAAK,SAAS,CAAC;IACzD;IAEA,MAAM,2BAA2B,CAAC,MAAc;QAC9C,MAAM,gBAAgB;YAAE,GAAG,gBAAgB;YAAE,CAAC,KAAK,EAAE;QAAK;QAC1D,oBAAoB;QACpB,aAAa,OAAO,CAAC,qBAAqB,KAAK,SAAS,CAAC;IAC3D;IAEA,MAAM,0BAA0B,CAAC,MAAc;QAC7C,MAAM,gBAAgB;YAAE,GAAG,eAAe;YAAE,CAAC,KAAK,EAAE;QAAK;QACzD,mBAAmB;QACnB,aAAa,OAAO,CAAC,oBAAoB,KAAK,SAAS,CAAC;IAC1D;IAEA,MAAM,2BAA2B,CAAC,MAAc;QAC9C,MAAM,gBAAgB;YAAE,GAAG,gBAAgB;YAAE,CAAC,KAAK,EAAE;QAAK;QAC1D,oBAAoB;QACpB,aAAa,OAAO,CAAC,qBAAqB,KAAK,SAAS,CAAC;IAC3D;IAEA,MAAM,0BAA0B,CAAC,MAAc;QAC7C,MAAM,gBAAgB;YAAE,GAAG,eAAe;YAAE,CAAC,KAAK,EAAE;QAAK;QACzD,mBAAmB;QACnB,aAAa,OAAO,CAAC,oBAAoB,KAAK,SAAS,CAAC;IAC1D;IAEA,MAAM,YAAY,CAAC,MAAc;QAC/B,MAAM,YAAY,SAAS,CAAC,KAAK;QACjC,IAAI,WAAW;YACb,cAAc,UAAU,OAAO,IAAI,EAAE;YACrC,cAAc,UAAU,UAAU,IAAI;gBAAE,OAAO;gBAAK,QAAQ;YAAI;YAChE,oBAAoB;YACpB,kBAAkB;YAClB,aAAa,OAAO,CAAC,+BAA+B;QACtD;IACF;IAEA,MAAM,oBAAoB;QACxB,MAAM,OAAO,OAAO,CAAC,0BAA0B,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,IAAI,CAAC,QAAQ,MAAM,GAAG,GAAG;QAC7F,IAAI,MAAM;YACN,IAAI,MAAM,CAAC,KAAK,EAAE;gBACd,MAAM;gBACN;YACJ;YAEA,MAAM,eAAe;gBACjB,SAAS,EAAE;gBACX,YAAY;oBAAE,OAAO;oBAAK,QAAQ;gBAAI;YAC1C;YAEA,IAAI;gBACA,MAAM,MAAM,mBAAmB;oBAC3B,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBAAE;wBAAM,MAAM;oBAAa;gBACpD;gBACA,MAAM,gBAAgB,MAAM;gBAC5B,UAAU,MAAM;YACpB,EAAE,OAAO,OAAO;gBACZ,QAAQ,KAAK,CAAC,+BAA+B;gBAC7C,MAAM,CAAC,4BAA4B,EAAE,OAAO;YAChD;QACJ;IACF;IAEA,MAAM,mBAAmB,CAAC;QACxB,IAAI,SAAS,WAAW;YACtB,iBAAiB;QACnB;QACA,cAAc;IAChB;IAEA,MAAM,kBAAkB;QACtB,IAAI,CAAC,kBAAkB;YACnB,4KAAA,CAAA,gBAAa,CAAC,IAAI,CAAC;gBACjB,OAAO;gBACP,SAAS;gBACT,OAAO;YACT;YACA;QACJ;QACA,YAAY;QACZ,MAAM,YAAY;YACd,SAAS;YACT,YAAY;QAChB;QACA,IAAI;YACA,MAAM,MAAM,mBAAmB;gBAC3B,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE,MAAM;oBAAkB,MAAM;gBAAU;YACnE;YACA,4KAAA,CAAA,gBAAa,CAAC,IAAI,CAAC;gBACf,OAAO;gBACP,SAAS,CAAC,SAAS,EAAE,iBAAiB,mBAAmB,CAAC;gBAC1D,OAAO;YACX;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,4KAAA,CAAA,gBAAa,CAAC,IAAI,CAAC;gBACf,OAAO;gBACP,SAAS,CAAC,8BAA8B,EAAE,OAAO;gBACjD,OAAO;YACX;QACJ,SAAU;YACR,YAAY;QACd;IACF;IAEA,MAAM,qBAAqB,CAAC;QAC1B,IAAI,CAAC,aAAa,EAAE,EAAE;QACtB,MAAM,gBAAgB,WAAW,GAAG,CAAC,CAAA;YACnC,IAAI,IAAI,EAAE,KAAK,aAAa,EAAE,EAAE;gBAC9B,OAAO;oBAAE,GAAG,GAAG;oBAAE,GAAG,YAAY;gBAAC;YACnC;YACA,OAAO;QACT;QACA,cAAc;QAEd,IAAI,kBAAkB,eAAe,EAAE,KAAK,aAAa,EAAE,EAAE;YAC3D,kBAAkB,CAAA,OAAQ,CAAC;oBAAE,GAAG,IAAI;oBAAG,GAAG,YAAY;gBAAC,CAAC;QAC1D;IACF;IAEA,MAAM,qBAAqB,CAAC;QAC1B,cAAc,WAAW,MAAM,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QAClD,kBAAkB;IACpB;IAEA,qBACE;kBACE,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAK,WAAU;;kCACd,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,+HAAA,CAAA,UAAS;4BACR,SAAS;4BACT,YAAY;4BACZ,QAAQ;4BACR,kBAAkB;4BAClB,WAAW,CAAC,OAAiB,UAAU,MAAM;4BAC7C,eAAe;4BACf,YAAY;4BACZ,eAAe;4BACf,eAAe;4BACf,kBAAkB;4BAClB,kBAAkB;4BAClB,yBAAyB;4BACzB,iBAAiB;4BACjB,wBAAwB;4BACxB,iBAAiB;4BACjB,wBAAwB;4BACxB,iBAAiB;4BACjB,wBAAwB;4BACxB,iBAAiB;4BACjB,wBAAwB;4BACxB,gBAAgB;4BAChB,uBAAuB;4BACvB,kBAAkB;4BAClB,yBAAyB;4BACzB,iBAAiB;4BACjB,wBAAwB;;;;;;;;;;;kCAG5B,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,6HAAA,CAAA,UAAO;gCACN,YAAY;gCACZ,cAAc;gCACd,QAAQ;gCACR,UAAU;;;;;;0CAEZ,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCACC,YAAY;oCACZ,eAAe;oCACf,gBAAgB;oCAChB,mBAAmB;oCACnB,YAAY;oCACZ,eAAe;oCACf,kBAAkB;oCAClB,iBAAiB;oCACjB,gBAAgB;;;;;;;;;;;;;;;;;kCAItB,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,gIAAA,CAAA,UAAU;4BACT,YAAY;4BACZ,gBAAgB;4BAChB,gBAAgB;4BAChB,gBAAgB;4BAChB,gBAAgB;4BAChB,kBAAkB;4BAClB,YAAY;4BACZ,eAAe;4BACf,iBAAiB;4BACjB,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;AAOlC","debugId":null}}]
}