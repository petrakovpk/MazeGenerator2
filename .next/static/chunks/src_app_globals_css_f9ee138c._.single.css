/* [project]/src/app/globals.css [app-client] (css) */
@layer properties {
  @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {
    *, :before, :after, ::backdrop {
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-border-style: solid;
      --tw-leading: initial;
      --tw-outline-style: solid;
      --tw-duration: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
    }
  }
}

.\@container\/card-header {
  container: card-header / inline-size;
}

.tooltip {
  --tt-bg: var(--color-neutral);
  --tt-off: calc(100% + .5rem);
  --tt-tail: calc(100% + 1px + .25rem);
  display: inline-block;
  position: relative;
}

.tooltip > :where(.tooltip-content), .tooltip:where([data-tip]):before {
  border-radius: var(--radius-field);
  text-align: center;
  white-space: normal;
  max-width: 20rem;
  color: var(--color-neutral-content);
  opacity: 0;
  background-color: var(--tt-bg);
  pointer-events: none;
  z-index: 2;
  --tw-content: attr(data-tip);
  content: var(--tw-content);
  width: max-content;
  padding-block: .25rem;
  padding-inline: .5rem;
  font-size: .875rem;
  line-height: 1.25;
  transition: opacity .2s cubic-bezier(.4, 0, .2, 1) 75ms, transform .2s cubic-bezier(.4, 0, .2, 1) 75ms;
  position: absolute;
}

.tooltip:after {
  opacity: 0;
  background-color: var(--tt-bg);
  content: "";
  pointer-events: none;
  --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
  width: .625rem;
  height: .25rem;
  mask-position: -1px 0;
  mask-repeat: no-repeat;
  mask-image: var(--mask-tooltip);
  transition: opacity .2s cubic-bezier(.4, 0, .2, 1) 75ms, transform .2s cubic-bezier(.4, 0, .2, 1) 75ms;
  display: block;
  position: absolute;
}

:is(.tooltip.tooltip-open, .tooltip[data-tip]:not([data-tip=""]):hover, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover, .tooltip:has(:focus-visible)) > .tooltip-content, :is(.tooltip.tooltip-open, .tooltip[data-tip]:not([data-tip=""]):hover, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover, .tooltip:has(:focus-visible))[data-tip]:before, :is(.tooltip.tooltip-open, .tooltip[data-tip]:not([data-tip=""]):hover, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover, .tooltip:has(:focus-visible)):after {
  opacity: 1;
  --tt-pos: 0rem;
  transition: opacity .2s cubic-bezier(.4, 0, .2, 1), transform .2s cubic-bezier(.4, 0, .2, 1);
}

.tooltip > .tooltip-content, .tooltip[data-tip]:before {
  transform: translateX(-50%) translateY(var(--tt-pos, .25rem));
  inset: auto auto var(--tt-off) 50%;
}

.tooltip:after {
  transform: translateX(-50%) translateY(var(--tt-pos, .25rem));
  inset: auto auto var(--tt-tail) 50%;
}

.tab {
  cursor: pointer;
  appearance: none;
  text-align: center;
  webkit-user-select: none;
  user-select: none;
  --tab-p: 1rem;
  --tab-bg: var(--color-base-100);
  --tab-border-color: var(--color-base-300);
  --tab-radius-ss: 0;
  --tab-radius-se: 0;
  --tab-radius-es: 0;
  --tab-radius-ee: 0;
  --tab-order: 0;
  --tab-radius-min: calc(.75rem - var(--border));
  flex-wrap: wrap;
  order: var(--tab-order);
  height: var(--tab-height);
  border-color: #0000;
  justify-content: center;
  align-items: center;
  padding-inline-start: var(--tab-p);
  padding-inline-end: var(--tab-p);
  font-size: .875rem;
  display: inline-flex;
  position: relative;
}

@media (hover: hover) {
  .tab:hover {
    color: var(--color-base-content);
  }
}

.tab:is(input[type="radio"]) {
  min-width: fit-content;
}

.tab:is(input[type="radio"]):after {
  content: attr(aria-label);
}

.tab:is(label) {
  position: relative;
}

.tab:is(label) input {
  cursor: pointer;
  appearance: none;
  opacity: 0;
  position: absolute;
  inset: 0;
}

:is(.tab:checked, .tab:is(label:has(:checked)), .tab:is(.tab-active, [aria-selected="true"])) + .tab-content {
  height: calc(100% - var(--tab-height)  + var(--border));
  display: block;
}

.tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"]) {
  color: var(--color-base-content);
}

@supports (color: color-mix(in lab, red, red)) {
  .tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"]) {
    color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
  }
}

.tab:not(input):empty {
  cursor: default;
  flex-grow: 1;
}

.tab:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .tab:focus {
    outline-offset: 2px;
    outline: 2px solid #0000;
  }
}

.tab:focus-visible, .tab:is(label:has(:checked:focus-visible)) {
  outline-offset: -5px;
  outline: 2px solid;
}

.tab[disabled] {
  pointer-events: none;
  opacity: .4;
}

.btn {
  cursor: pointer;
  text-align: center;
  vertical-align: middle;
  outline-offset: 2px;
  webkit-user-select: none;
  user-select: none;
  padding-inline: var(--btn-p);
  color: var(--btn-fg);
  --tw-prose-links: var(--btn-fg);
  height: var(--size);
  font-size: var(--fontsize, .875rem);
  outline-color: var(--btn-color, var(--color-base-content));
  background-color: var(--btn-bg);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--btn-noise);
  border-width: var(--border);
  border-style: solid;
  border-color: var(--btn-border);
  text-shadow: 0 .5px oklch(100% 0 0 / calc(var(--depth) * .15));
  touch-action: manipulation;
  box-shadow: 0 .5px 0 .5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
  --size: calc(var(--size-field, .25rem) * 10);
  --btn-bg: var(--btn-color, var(--color-base-200));
  --btn-fg: var(--color-base-content);
  --btn-p: 1rem;
  --btn-border: var(--btn-bg);
  --btn-shadow: 0 3px 2px -2px var(--btn-bg), 0 4px 3px -2px var(--btn-bg);
  --btn-noise: var(--fx-noise);
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  flex-wrap: nowrap;
  flex-shrink: 0;
  justify-content: center;
  align-items: center;
  gap: .375rem;
  font-weight: 600;
  transition-property: color, background-color, border-color, box-shadow;
  transition-duration: .2s;
  transition-timing-function: cubic-bezier(0, 0, .2, 1);
  display: inline-flex;
}

:where(.btn) {
  width: unset;
}

@supports (color: color-mix(in lab, red, red)) {
  .btn {
    --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000), 0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
  }
}

.prose .btn {
  text-decoration-line: none;
}

@media (hover: hover) {
  .btn:hover {
    --btn-bg: var(--btn-color, var(--color-base-200));
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:hover {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
    }
  }
}

.btn:focus-visible {
  isolation: isolate;
  outline-width: 2px;
  outline-style: solid;
}

.btn:active:not(.btn-active) {
  --btn-bg: var(--btn-color, var(--color-base-200));
  --btn-border: var(--btn-color, var(--color-base-200));
  --btn-shadow: 0 0 0 0 oklch(0% 0 0 / 0), 0 0 0 0 oklch(0% 0 0 / 0);
  translate: 0 .5px;
}

@supports (color: color-mix(in lab, red, red)) {
  .btn:active:not(.btn-active) {
    --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
    --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
  }
}

.btn:is(:disabled, [disabled], .btn-disabled) {
  pointer-events: none;
  --btn-border: #0000;
  --btn-noise: none;
  --btn-fg: var(--color-base-content);
}

.btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
  background-color: var(--color-base-content);
  box-shadow: none;
}

@supports (color: color-mix(in lab, red, red)) {
  .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
    background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  }
}

@supports (color: color-mix(in lab, red, red)) {
  .btn:is(:disabled, [disabled], .btn-disabled) {
    --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
  }
}

@media (hover: hover) {
  .btn:is(:disabled, [disabled], .btn-disabled):hover {
    pointer-events: none;
    background-color: var(--color-neutral);
    --btn-border: #0000;
    --btn-fg: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled):hover {
      background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
  }
}

.btn:is(input[type="checkbox"], input[type="radio"]) {
  appearance: none;
}

.btn:is(input[type="checkbox"], input[type="radio"]):after {
  content: attr(aria-label);
}

.btn:where(input:checked:not(.filter .btn)) {
  --btn-color: var(--color-primary);
  --btn-fg: var(--color-primary-content);
  isolation: isolate;
}

.loading {
  pointer-events: none;
  aspect-ratio: 1;
  vertical-align: middle;
  width: calc(var(--size-selector, .25rem) * 6);
  background-color: currentColor;
  display: inline-block;
  mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
  mask-position: center;
  mask-size: 100%;
  mask-repeat: no-repeat;
}

.pointer-events-none {
  pointer-events: none;
}

.toast {
  inset-inline: auto 1rem;
  translate: var(--toast-x, 0) var(--toast-y, 0);
  background-color: #0000;
  flex-direction: column;
  gap: .5rem;
  width: max-content;
  max-width: calc(100vw - 2rem);
  display: flex;
  position: fixed;
  top: auto;
  bottom: 1rem;
}

.toast > * {
  animation: .25s ease-out toast;
}

.toast:where(.toast-start) {
  --toast-x: 0;
  inset-inline: 1rem auto;
}

.toast:where(.toast-center) {
  --toast-x: -50%;
  inset-inline: 50%;
}

.toast:where(.toast-end) {
  --toast-x: 0;
  inset-inline: auto 1rem;
}

.toast:where(.toast-bottom) {
  --toast-y: 0;
  top: auto;
  bottom: 1rem;
}

.toast:where(.toast-middle) {
  --toast-y: -50%;
  top: 50%;
  bottom: auto;
}

.toast:where(.toast-top) {
  --toast-y: 0;
  top: 1rem;
  bottom: auto;
}

.toggle {
  border: var(--border) solid currentColor;
  color: var(--input-color);
  cursor: pointer;
  appearance: none;
  vertical-align: middle;
  webkit-user-select: none;
  user-select: none;
  --radius-selector-max: calc(var(--radius-selector)  + var(--radius-selector)  + var(--radius-selector));
  border-radius: calc(var(--radius-selector)  + min(var(--toggle-p), var(--radius-selector-max))  + min(var(--border), var(--radius-selector-max)));
  padding: var(--toggle-p);
  --input-color: var(--color-base-content);
  --toggle-p: calc(var(--size) * .125);
  --size: calc(var(--size-selector, .25rem) * 6);
  width: calc((var(--size) * 2)  - (var(--border)  + var(--toggle-p)) * 2);
  height: var(--size);
  flex-shrink: 0;
  grid-template-columns: 0fr 1fr 1fr;
  place-content: center;
  transition: color .3s, grid-template-columns .2s;
  display: inline-grid;
  position: relative;
  box-shadow: inset 0 1px;
}

@supports (color: color-mix(in lab, red, red)) {
  .toggle {
    box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
    --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
  }
}

.toggle > * {
  z-index: 1;
  cursor: pointer;
  appearance: none;
  background-color: #0000;
  border: none;
  grid-column: 2 / span 1;
  grid-row-start: 1;
  height: 100%;
  padding: .125rem;
  transition: opacity .2s, rotate .4s;
}

.toggle > *:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .toggle > *:focus {
    outline-offset: 2px;
    outline: 2px solid #0000;
  }
}

.toggle > *:nth-child(2) {
  color: var(--color-base-100);
  rotate: none;
}

.toggle > *:nth-child(3) {
  color: var(--color-base-100);
  opacity: 0;
  rotate: -15deg;
}

.toggle:has(:checked) > :nth-child(2) {
  opacity: 0;
  rotate: 15deg;
}

.toggle:has(:checked) > :nth-child(3) {
  opacity: 1;
  rotate: none;
}

.toggle:before {
  aspect-ratio: 1;
  border-radius: var(--radius-selector);
  --tw-content: "";
  content: var(--tw-content);
  height: 100%;
  box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px currentColor;
  background-color: currentColor;
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
  grid-row-start: 1;
  grid-column-start: 2;
  transition: background-color .1s, translate .2s, inset-inline-start .2s;
  position: relative;
  inset-inline-start: 0;
  translate: 0;
}

@supports (color: color-mix(in lab, red, red)) {
  .toggle:before {
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
  }
}

@media (forced-colors: active) {
  .toggle:before {
    outline-style: var(--tw-outline-style);
    outline-offset: calc(1px * -1);
    outline-width: 1px;
  }
}

@media print {
  .toggle:before {
    outline-offset: -1rem;
    outline: .25rem solid;
  }
}

.toggle:focus-visible, .toggle:has(:focus-visible) {
  outline-offset: 2px;
  outline: 2px solid;
}

.toggle:checked, .toggle[aria-checked="true"], .toggle:has( > input:checked) {
  background-color: var(--color-base-100);
  --input-color: var(--color-base-content);
  grid-template-columns: 1fr 1fr 0fr;
}

:is(.toggle:checked, .toggle[aria-checked="true"], .toggle:has( > input:checked)):before {
  background-color: currentColor;
}

@starting-style {
  :is(.toggle:checked, .toggle[aria-checked="true"], .toggle:has( > input:checked)):before {
    opacity: 0;
  }
}

.toggle:indeterminate {
  grid-template-columns: .5fr 1fr .5fr;
}

.toggle:disabled {
  cursor: not-allowed;
  opacity: .3;
}

.toggle:disabled:before {
  border: var(--border) solid currentColor;
  background-color: #0000;
}

.input {
  cursor: text;
  border: var(--border) solid #0000;
  appearance: none;
  background-color: var(--color-base-100);
  vertical-align: middle;
  white-space: nowrap;
  width: clamp(3rem, 20rem, 100%);
  height: var(--size);
  touch-action: manipulation;
  border-color: var(--input-color);
  box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
  --size: calc(var(--size-field, .25rem) * 10);
  --input-color: var(--color-base-content);
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  flex-shrink: 1;
  align-items: center;
  gap: .5rem;
  padding-inline: .75rem;
  font-size: .875rem;
  display: inline-flex;
  position: relative;
}

@supports (color: color-mix(in lab, red, red)) {
  .input {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  }
}

.input:where(input) {
  display: inline-flex;
}

.input :where(input) {
  appearance: none;
  background-color: #0000;
  border: none;
  width: 100%;
  height: 100%;
  display: inline-flex;
}

.input :where(input):focus, .input :where(input):focus-within {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  :is(.input :where(input):focus, .input :where(input):focus-within) {
    outline-offset: 2px;
    outline: 2px solid #0000;
  }
}

.input :where(input[type="url"]), .input :where(input[type="email"]) {
  direction: ltr;
}

.input :where(input[type="date"]) {
  display: inline-block;
}

.input:focus, .input:focus-within {
  --input-color: var(--color-base-content);
  box-shadow: 0 1px var(--input-color);
  outline: 2px solid var(--input-color);
  outline-offset: 2px;
  isolation: isolate;
  z-index: 1;
}

@supports (color: color-mix(in lab, red, red)) {
  :is(.input:focus, .input:focus-within) {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
  }
}

.input:has( > input[disabled]), .input:is(:disabled, [disabled]) {
  cursor: not-allowed;
  border-color: var(--color-base-200);
  background-color: var(--color-base-200);
  color: var(--color-base-content);
  box-shadow: none;
}

@supports (color: color-mix(in lab, red, red)) {
  :is(.input:has( > input[disabled]), .input:is(:disabled, [disabled])) {
    color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
  }
}

:is(.input:has( > input[disabled]), .input:is(:disabled, [disabled]))::placeholder {
  color: var(--color-base-content);
}

@supports (color: color-mix(in lab, red, red)) {
  :is(.input:has( > input[disabled]), .input:is(:disabled, [disabled]))::placeholder {
    color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
  }
}

.input:has( > input[disabled]) > input[disabled] {
  cursor: not-allowed;
}

.input::-webkit-date-and-time-value {
  text-align: inherit;
}

.input[type="number"]::-webkit-inner-spin-button {
  margin-block: -.75rem;
  margin-inline-end: -.75rem;
}

.input::-webkit-calendar-picker-indicator {
  position: absolute;
  inset-inline-end: .75em;
}

.select {
  border: var(--border) solid #0000;
  appearance: none;
  background-color: var(--color-base-100);
  vertical-align: middle;
  width: clamp(3rem, 20rem, 100%);
  height: var(--size);
  touch-action: manipulation;
  text-overflow: ellipsis;
  box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
  border-color: var(--input-color);
  --input-color: var(--color-base-content);
  --size: calc(var(--size-field, .25rem) * 10);
  background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
  background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
  background-repeat: no-repeat;
  background-size: 4px 4px, 4px 4px;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  flex-shrink: 1;
  align-items: center;
  gap: .375rem;
  padding-inline: 1rem 1.75rem;
  font-size: .875rem;
  display: inline-flex;
  position: relative;
}

@supports (color: color-mix(in lab, red, red)) {
  .select {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
    --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  }
}

[dir="rtl"] .select {
  background-position: 12px calc(1px + 50%), 16px calc(1px + 50%);
}

.select select {
  appearance: none;
  background: inherit;
  border-radius: inherit;
  border-style: none;
  width: calc(100% + 2.75rem);
  height: calc(100% - 2px);
  margin-inline: -1rem -1.75rem;
  padding-inline: 1rem 1.75rem;
}

.select select:focus, .select select:focus-within {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  :is(.select select:focus, .select select:focus-within) {
    outline-offset: 2px;
    outline: 2px solid #0000;
  }
}

.select select:not(:last-child) {
  background-image: none;
  margin-inline-end: -1.375rem;
}

.select:focus, .select:focus-within {
  --input-color: var(--color-base-content);
  box-shadow: 0 1px var(--input-color);
  outline: 2px solid var(--input-color);
  outline-offset: 2px;
  isolation: isolate;
  z-index: 1;
}

@supports (color: color-mix(in lab, red, red)) {
  :is(.select:focus, .select:focus-within) {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
  }
}

.select:has( > select[disabled]), .select:is(:disabled, [disabled]) {
  cursor: not-allowed;
  border-color: var(--color-base-200);
  background-color: var(--color-base-200);
  color: var(--color-base-content);
}

@supports (color: color-mix(in lab, red, red)) {
  :is(.select:has( > select[disabled]), .select:is(:disabled, [disabled])) {
    color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
  }
}

:is(.select:has( > select[disabled]), .select:is(:disabled, [disabled]))::placeholder {
  color: var(--color-base-content);
}

@supports (color: color-mix(in lab, red, red)) {
  :is(.select:has( > select[disabled]), .select:is(:disabled, [disabled]))::placeholder {
    color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
  }
}

.select:has( > select[disabled]) > select[disabled] {
  cursor: not-allowed;
}

.card {
  border-radius: var(--radius-box);
  outline-offset: 2px;
  outline: 0 solid #0000;
  flex-direction: column;
  transition: outline .2s ease-in-out;
  display: flex;
  position: relative;
}

.card:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .card:focus {
    outline-offset: 2px;
    outline: 2px solid #0000;
  }
}

.card:focus-visible {
  outline-color: currentColor;
}

.card :where(figure:first-child) {
  border-start-start-radius: inherit;
  border-start-end-radius: inherit;
  border-end-end-radius: unset;
  border-end-start-radius: unset;
  overflow: hidden;
}

.card :where(figure:last-child) {
  border-start-start-radius: unset;
  border-start-end-radius: unset;
  border-end-end-radius: inherit;
  border-end-start-radius: inherit;
  overflow: hidden;
}

.card:where(.card-border) {
  border: var(--border) solid var(--color-base-200);
}

.card:where(.card-dash) {
  border: var(--border) dashed var(--color-base-200);
}

.card.image-full {
  display: grid;
}

.card.image-full > * {
  grid-row-start: 1;
  grid-column-start: 1;
}

.card.image-full > .card-body {
  color: var(--color-neutral-content);
  position: relative;
}

.card.image-full :where(figure) {
  border-radius: inherit;
  overflow: hidden;
}

.card.image-full > figure img {
  object-fit: cover;
  filter: brightness(28%);
  height: 100%;
}

.card figure {
  justify-content: center;
  align-items: center;
  display: flex;
}

.card:has( > input:is(input[type="checkbox"], input[type="radio"])) {
  cursor: pointer;
  user-select: none;
}

.card:has( > :checked) {
  outline: 2px solid;
}

.sr-only {
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  position: absolute;
  overflow: hidden;
}

.checkbox {
  border: var(--border) solid var(--input-color, var(--color-base-content));
  cursor: pointer;
  appearance: none;
  border-radius: var(--radius-selector);
  vertical-align: middle;
  color: var(--color-base-content);
  box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * .1)) inset, 0 0 #0000 inset, 0 0 #0000;
  --size: calc(var(--size-selector, .25rem) * 6);
  width: var(--size);
  height: var(--size);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
  flex-shrink: 0;
  padding: .25rem;
  transition: background-color .2s, box-shadow .2s;
  display: inline-block;
  position: relative;
}

@supports (color: color-mix(in lab, red, red)) {
  .checkbox {
    border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
  }
}

.checkbox:before {
  --tw-content: "";
  content: var(--tw-content);
  opacity: 0;
  clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
  width: 100%;
  height: 100%;
  box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * .1)) inset;
  background-color: currentColor;
  font-size: 1rem;
  line-height: .75;
  transition: clip-path .3s .1s, opacity .1s .1s, rotate .3s .1s, translate .3s .1s;
  display: block;
  rotate: 45deg;
}

.checkbox:focus-visible {
  outline: 2px solid var(--input-color, currentColor);
  outline-offset: 2px;
}

.checkbox:checked, .checkbox[aria-checked="true"] {
  background-color: var(--input-color, #0000);
  box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * .1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * .1));
}

:is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
  clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
  opacity: 1;
}

@media (forced-colors: active) {
  :is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
    --tw-content: "✔︎";
    clip-path: none;
    background-color: #0000;
    rotate: none;
  }
}

@media print {
  :is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
    --tw-content: "✔︎";
    clip-path: none;
    background-color: #0000;
    rotate: none;
  }
}

.checkbox:indeterminate:before {
  opacity: 1;
  clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
  translate: 0 -35%;
  rotate: none;
}

.checkbox:disabled {
  cursor: not-allowed;
  opacity: .2;
}

.absolute {
  position: absolute;
}

.fixed {
  position: fixed;
}

.relative {
  position: relative;
}

.top-\[50\%\] {
  top: 50%;
}

.left-\[50\%\] {
  left: 50%;
}

.z-10 {
  z-index: 10;
}

.z-50 {
  z-index: 50;
}

.col-start-2 {
  grid-column-start: 2;
}

.row-span-2 {
  grid-row: span 2 / span 2;
}

.row-start-1 {
  grid-row-start: 1;
}

.container {
  width: 100%;
}

.divider {
  white-space: nowrap;
  height: 1rem;
  margin: var(--divider-m, 1rem 0);
  --divider-color: var(--color-base-content);
  flex-direction: row;
  align-self: stretch;
  align-items: center;
  display: flex;
}

@supports (color: color-mix(in lab, red, red)) {
  .divider {
    --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  }
}

.divider:before, .divider:after {
  content: "";
  background-color: var(--divider-color);
  flex-grow: 1;
  width: 100%;
  height: .125rem;
}

@media print {
  .divider:before, .divider:after {
    border: .5px solid;
  }
}

.divider:not(:empty) {
  gap: 1rem;
}

.container {
  margin-inline: auto;
  padding-inline: 2rem;
}

@media (width >= 1400px) {
  .container {
    max-width: 1400px;
  }
}

.label {
  white-space: nowrap;
  color: currentColor;
  align-items: center;
  gap: .375rem;
  display: inline-flex;
}

@supports (color: color-mix(in lab, red, red)) {
  .label {
    color: color-mix(in oklab, currentColor 60%, transparent);
  }
}

.label:has(input) {
  cursor: pointer;
}

.label:is(.input > *, .select > *) {
  white-space: nowrap;
  height: calc(100% - .5rem);
  font-size: inherit;
  align-items: center;
  padding-inline: .75rem;
  display: flex;
}

.label:is(.input > *, .select > *):first-child {
  border-inline-end: var(--border) solid currentColor;
  margin-inline: -.75rem .75rem;
}

@supports (color: color-mix(in lab, red, red)) {
  .label:is(.input > *, .select > *):first-child {
    border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
  }
}

.label:is(.input > *, .select > *):last-child {
  border-inline-start: var(--border) solid currentColor;
  margin-inline: .75rem -.75rem;
}

@supports (color: color-mix(in lab, red, red)) {
  .label:is(.input > *, .select > *):last-child {
    border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
  }
}

.ml-auto {
  margin-left: auto;
}

.status {
  aspect-ratio: 1;
  border-radius: var(--radius-selector);
  background-color: var(--color-base-content);
  vertical-align: middle;
  color: #0000004d;
  background-position: center;
  background-repeat: no-repeat;
  background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * .5)), #0000);
  width: .5rem;
  height: .5rem;
  display: inline-block;
  box-shadow: 0 2px 3px -1px;
}

@supports (color: color-mix(in lab, red, red)) {
  .status {
    background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    color: var(--color-black);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .status {
      color: color-mix(in oklab, var(--color-black) 30%, transparent);
    }
  }

  .status {
    box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
  }
}

.badge {
  border-radius: var(--radius-selector);
  vertical-align: middle;
  color: var(--badge-fg);
  border: var(--border) solid var(--badge-color, var(--color-base-200));
  width: fit-content;
  padding-inline: calc(.25rem * 3 - var(--border));
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
  background-color: var(--badge-bg);
  --badge-bg: var(--badge-color, var(--color-base-100));
  --badge-fg: var(--color-base-content);
  --size: calc(var(--size-selector, .25rem) * 6);
  height: var(--size);
  justify-content: center;
  align-items: center;
  gap: .5rem;
  font-size: .875rem;
  display: inline-flex;
}

.tabs {
  --tabs-height: auto;
  --tabs-direction: row;
  --tab-height: calc(var(--size-field, .25rem) * 10);
  height: var(--tabs-height);
  flex-wrap: wrap;
  flex-direction: var(--tabs-direction);
  display: flex;
}

.navbar {
  align-items: center;
  width: 100%;
  min-height: 4rem;
  padding: .5rem;
  display: flex;
}

.navbar-end {
  justify-content: flex-end;
  align-items: center;
  width: 50%;
  display: inline-flex;
}

.navbar-start {
  justify-content: flex-start;
  align-items: center;
  width: 50%;
  display: inline-flex;
}

.card-body {
  padding: var(--card-p, 1.5rem);
  font-size: var(--card-fs, .875rem);
  flex-direction: column;
  flex: auto;
  gap: .5rem;
  display: flex;
}

.card-body :where(p) {
  flex-grow: 1;
}

.card-title {
  font-size: var(--cardtitle-fs, 1.125rem);
  align-items: center;
  gap: .5rem;
  font-weight: 600;
  display: flex;
}

.flex {
  display: flex;
}

.grid {
  display: grid;
}

.inline-flex {
  display: inline-flex;
}

.divider-horizontal {
  --divider-m: 0 1rem;
}

.divider-horizontal.divider {
  flex-direction: column;
  width: 1rem;
  height: auto;
}

.divider-horizontal.divider:before, .divider-horizontal.divider:after {
  width: .125rem;
  height: 100%;
}

.btn-square {
  width: var(--size);
  height: var(--size);
  padding-inline: 0;
}

.size-full {
  width: 100%;
  height: 100%;
}

.h-\[300px\] {
  height: 300px;
}

.h-\[400px\] {
  height: 400px;
}

.h-\[calc\(100\%-1px\)\] {
  height: calc(100% - 1px);
}

.h-\[calc\(100vh-300px\)\] {
  height: calc(100vh - 300px);
}

.h-\[calc\(100vh-400px\)\] {
  height: calc(100vh - 400px);
}

.h-\[var\(--radix-select-trigger-height\)\] {
  height: var(--radix-select-trigger-height);
}

.h-auto {
  height: auto;
}

.h-full {
  height: 100%;
}

.h-px {
  height: 1px;
}

.h-screen {
  height: 100vh;
}

.max-h-\(--radix-select-content-available-height\) {
  max-height: var(--radix-select-content-available-height);
}

.w-\[300px\] {
  width: 300px;
}

.w-fit {
  width: fit-content;
}

.w-full {
  width: 100%;
}

.max-w-\[calc\(100\%-2rem\)\] {
  max-width: calc(100% - 2rem);
}

.min-w-\[8rem\] {
  min-width: 8rem;
}

.min-w-\[var\(--radix-select-trigger-width\)\] {
  min-width: var(--radix-select-trigger-width);
}

.flex-1 {
  flex: 1;
}

.flex-shrink-0, .shrink-0 {
  flex-shrink: 0;
}

.flex-grow {
  flex-grow: 1;
}

.origin-\(--radix-select-content-transform-origin\) {
  transform-origin: var(--radix-select-content-transform-origin);
}

.origin-\(--radix-tooltip-content-transform-origin\) {
  transform-origin: var(--radix-tooltip-content-transform-origin);
}

.translate-x-\[-50\%\] {
  --tw-translate-x: -50%;
  translate: var(--tw-translate-x) var(--tw-translate-y);
}

.translate-y-\[-50\%\] {
  --tw-translate-y: -50%;
  translate: var(--tw-translate-x) var(--tw-translate-y);
}

.translate-y-\[calc\(-50\%_-_2px\)\] {
  --tw-translate-y: calc(-50% - 2px);
  translate: var(--tw-translate-x) var(--tw-translate-y);
}

.rotate-45 {
  rotate: 45deg;
}

.transform {
  transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );
}

.link {
  cursor: pointer;
  text-decoration-line: underline;
}

.link:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .link:focus {
    outline-offset: 2px;
    outline: 2px solid #0000;
  }
}

.link:focus-visible {
  outline-offset: 2px;
  outline: 2px solid;
}

.cursor-col-resize {
  cursor: col-resize;
}

.cursor-default {
  cursor: default;
}

.cursor-pointer {
  cursor: pointer;
}

.touch-none {
  touch-action: none;
}

.auto-rows-min {
  grid-auto-rows: min-content;
}

.grid-cols-2 {
  grid-template-columns: repeat(2, minmax(0, 1fr));
}

.grid-cols-3 {
  grid-template-columns: repeat(3, minmax(0, 1fr));
}

.grid-rows-\[auto_auto\] {
  grid-template-rows: auto auto;
}

.flex-col {
  flex-direction: column;
}

.flex-col-reverse {
  flex-direction: column-reverse;
}

.flex-wrap {
  flex-wrap: wrap;
}

.items-center {
  align-items: center;
}

.items-start {
  align-items: flex-start;
}

.justify-between {
  justify-content: space-between;
}

.justify-center {
  justify-content: center;
}

.justify-start {
  justify-content: flex-start;
}

.self-start {
  align-self: flex-start;
}

.justify-self-end {
  justify-self: flex-end;
}

.overflow-auto {
  overflow: auto;
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-x-hidden {
  overflow-x: hidden;
}

.overflow-y-auto {
  overflow-y: auto;
}

.rounded-\[2px\] {
  border-radius: 2px;
}

.rounded-\[4px\] {
  border-radius: 4px;
}

.rounded-\[inherit\] {
  border-radius: inherit;
}

.rounded-full {
  border-radius: 3.40282e38px;
}

.border {
  border-style: var(--tw-border-style);
  border-width: 1px;
}

.border-2 {
  border-style: var(--tw-border-style);
  border-width: 2px;
}

.border-t {
  border-top-style: var(--tw-border-style);
  border-top-width: 1px;
}

.border-r {
  border-right-style: var(--tw-border-style);
  border-right-width: 1px;
}

.border-b {
  border-bottom-style: var(--tw-border-style);
  border-bottom-width: 1px;
}

.border-l {
  border-left-style: var(--tw-border-style);
  border-left-width: 1px;
}

.border-l-2 {
  border-left-style: var(--tw-border-style);
  border-left-width: 2px;
}

.border-base-300 {
  border-color: var(--color-base-300);
}

.border-primary {
  border-color: var(--color-primary);
}

.border-transparent {
  border-color: #0000;
}

.border-t-transparent {
  border-top-color: #0000;
}

.border-l-transparent {
  border-left-color: #0000;
}

.bg-accent {
  background-color: var(--color-accent);
}

.bg-base-100 {
  background-color: var(--color-base-100);
}

.bg-base-200 {
  background-color: var(--color-base-200);
}

.bg-primary {
  background-color: var(--color-primary);
}

.bg-primary\/20 {
  background-color: var(--color-primary);
}

@supports (color: color-mix(in lab, red, red)) {
  .bg-primary\/20 {
    background-color: color-mix(in oklab, var(--color-primary) 20%, transparent);
  }
}

.bg-secondary {
  background-color: var(--color-secondary);
}

.bg-transparent {
  background-color: #0000;
}

.fill-primary {
  fill: var(--color-primary);
}

.object-contain {
  object-fit: contain;
}

.p-\[3px\] {
  padding: 3px;
}

.p-px {
  padding: 1px;
}

.text-center {
  text-align: center;
}

.leading-none {
  --tw-leading: 1;
  line-height: 1;
}

.text-balance {
  text-wrap: balance;
}

.whitespace-nowrap {
  white-space: nowrap;
}

.text-base-content {
  color: var(--color-base-content);
}

.text-current {
  color: currentColor;
}

.capitalize {
  text-transform: capitalize;
}

.btn-link {
  --btn-border: #0000;
  --btn-bg: #0000;
  --btn-fg: var(--color-primary);
  --btn-noise: none;
  --btn-shadow: "";
  outline-color: currentColor;
  text-decoration-line: underline;
}

.btn-link:is(.btn-active, :hover, :active:focus, :focus-visible) {
  --btn-border: #0000;
  --btn-bg: #0000;
  text-decoration-line: underline;
}

@media (hover: none) {
  .btn-link:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
    text-decoration-line: none;
  }
}

.opacity-50 {
  opacity: .5;
}

.opacity-70 {
  opacity: .7;
}

.outline-hidden {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .outline-hidden {
    outline-offset: 2px;
    outline: 2px solid #0000;
  }
}

.outline {
  outline-style: var(--tw-outline-style);
  outline-width: 1px;
}

.btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible) {
  --btn-shadow: "";
  --btn-bg: #0000;
  --btn-border: #0000;
  --btn-noise: none;
}

.btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible):not(:disabled, [disabled], .btn-disabled) {
  --btn-fg: currentColor;
  outline-color: currentColor;
}

@media (hover: none) {
  .btn-ghost:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: currentColor;
  }
}

.transition-\[color\,box-shadow\] {
  transition-property: color, box-shadow;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}

.transition-all {
  transition-property: all;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}

.transition-colors {
  transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}

.transition-opacity {
  transition-property: opacity;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}

.transition-shadow {
  transition-property: box-shadow;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}

.transition-none {
  transition-property: none;
}

.duration-200 {
  --tw-duration: .2s;
  transition-duration: .2s;
}

.btn-outline:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked) {
  --btn-shadow: "";
  --btn-bg: #0000;
  --btn-fg: var(--btn-color);
  --btn-border: var(--btn-color);
  --btn-noise: none;
}

@media (hover: none) {
  .btn-outline:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-fg: var(--btn-color);
    --btn-border: var(--btn-color);
    --btn-noise: none;
  }
}

.animate-in {
  animation-name: enter;
  animation-duration: undefined;
  --tw-enter-opacity: initial;
  --tw-enter-scale: initial;
  --tw-enter-rotate: initial;
  --tw-enter-translate-x: initial;
  --tw-enter-translate-y: initial;
}

.btn-lg {
  --fontsize: 1.125rem;
  --btn-p: 1.25rem;
  --size: calc(var(--size-field, .25rem) * 12);
}

.btn-md {
  --fontsize: .875rem;
  --btn-p: 1rem;
  --size: calc(var(--size-field, .25rem) * 10);
}

.btn-sm {
  --fontsize: .75rem;
  --btn-p: .75rem;
  --size: calc(var(--size-field, .25rem) * 8);
}

.badge-secondary {
  --badge-color: var(--color-secondary);
  --badge-fg: var(--color-secondary-content);
}

.btn-error {
  --btn-color: var(--color-error);
  --btn-fg: var(--color-error-content);
}

.btn-primary {
  --btn-color: var(--color-primary);
  --btn-fg: var(--color-primary-content);
}

.btn-secondary {
  --btn-color: var(--color-secondary);
  --btn-fg: var(--color-secondary-content);
}

.outline-none {
  --tw-outline-style: none;
  outline-style: none;
}

.select-none {
  -webkit-user-select: none;
  user-select: none;
}

.duration-200 {
  animation-duration: .2s;
}

.ease-out {
  animation-timing-function: cubic-bezier(0, 0, .2, 1);
}

.fade-in-0 {
  --tw-enter-opacity: 0;
}

.toggle-primary:checked, .toggle-primary[aria-checked="true"] {
  --input-color: var(--color-primary);
}

.zoom-in-95 {
  --tw-enter-scale: .95;
}

.group-data-\[disabled\=true\]\:pointer-events-none:is(:where(.group)[data-disabled="true"] *) {
  pointer-events: none;
}

.group-data-\[disabled\=true\]\:opacity-50:is(:where(.group)[data-disabled="true"] *) {
  opacity: .5;
}

.peer-disabled\:cursor-not-allowed:is(:where(.peer):disabled ~ *) {
  cursor: not-allowed;
}

.peer-disabled\:opacity-50:is(:where(.peer):disabled ~ *) {
  opacity: .5;
}

.selection\:bg-primary ::selection, .selection\:bg-primary::selection {
  background-color: var(--color-primary);
}

.file\:inline-flex::file-selector-button {
  display: inline-flex;
}

.file\:border-0::file-selector-button {
  border-style: var(--tw-border-style);
  border-width: 0;
}

.file\:bg-transparent::file-selector-button {
  background-color: #0000;
}

@media (hover: hover) {
  .hover\:bg-accent:hover {
    background-color: var(--color-accent);
  }
}

@media (hover: hover) {
  .hover\:bg-base-200:hover {
    background-color: var(--color-base-200);
  }
}

@media (hover: hover) {
  .hover\:opacity-100:hover {
    opacity: 1;
  }
}

.focus\:bg-accent:focus {
  background-color: var(--color-accent);
}

.focus\:ring-2:focus {
  --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

.focus\:ring-offset-2:focus {
  --tw-ring-offset-width: 2px;
  --tw-ring-offset-shadow: var(--tw-ring-inset, ) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
}

.focus\:outline-hidden:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .focus\:outline-hidden:focus {
    outline-offset: 2px;
    outline: 2px solid #0000;
  }
}

.focus-visible\:ring-\[3px\]:focus-visible {
  --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

.focus-visible\:outline-1:focus-visible {
  outline-style: var(--tw-outline-style);
  outline-width: 1px;
}

.disabled\:pointer-events-none:disabled {
  pointer-events: none;
}

.disabled\:cursor-not-allowed:disabled {
  cursor: not-allowed;
}

.disabled\:opacity-50:disabled {
  opacity: .5;
}

.has-data-\[slot\=card-action\]\:grid-cols-\[1fr_auto\]:has([data-slot="card-action"]) {
  grid-template-columns: 1fr auto;
}

.data-\[disabled\]\:pointer-events-none[data-disabled] {
  pointer-events: none;
}

.data-\[disabled\]\:opacity-50[data-disabled] {
  opacity: .5;
}

.data-\[orientation\=horizontal\]\:h-px[data-orientation="horizontal"] {
  height: 1px;
}

.data-\[orientation\=horizontal\]\:w-full[data-orientation="horizontal"] {
  width: 100%;
}

.data-\[orientation\=vertical\]\:h-full[data-orientation="vertical"] {
  height: 100%;
}

.data-\[orientation\=vertical\]\:w-px[data-orientation="vertical"] {
  width: 1px;
}

.data-\[side\=bottom\]\:slide-in-from-top-2[data-side="bottom"] {
  --tw-enter-translate-y: -.5rem;
}

.data-\[side\=left\]\:slide-in-from-right-2[data-side="left"] {
  --tw-enter-translate-x: .5rem;
}

.data-\[side\=right\]\:slide-in-from-left-2[data-side="right"] {
  --tw-enter-translate-x: -.5rem;
}

.data-\[side\=top\]\:slide-in-from-bottom-2[data-side="top"] {
  --tw-enter-translate-y: .5rem;
}

:is(.\*\:data-\[slot\=select-value\]\:line-clamp-1 > *)[data-slot="select-value"] {
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
  display: -webkit-box;
  overflow: hidden;
}

:is(.\*\:data-\[slot\=select-value\]\:flex > *)[data-slot="select-value"] {
  display: flex;
}

:is(.\*\:data-\[slot\=select-value\]\:items-center > *)[data-slot="select-value"] {
  align-items: center;
}

.data-\[state\=checked\]\:border-primary[data-state="checked"] {
  border-color: var(--color-primary);
}

.data-\[state\=checked\]\:bg-primary[data-state="checked"] {
  background-color: var(--color-primary);
}

.data-\[state\=closed\]\:animate-out[data-state="closed"] {
  animation-name: exit;
  animation-duration: undefined;
  --tw-exit-opacity: initial;
  --tw-exit-scale: initial;
  --tw-exit-rotate: initial;
  --tw-exit-translate-x: initial;
  --tw-exit-translate-y: initial;
}

.data-\[state\=closed\]\:fade-out-0[data-state="closed"] {
  --tw-exit-opacity: 0;
}

.data-\[state\=closed\]\:zoom-out-95[data-state="closed"] {
  --tw-exit-scale: .95;
}

.data-\[state\=open\]\:bg-accent[data-state="open"] {
  background-color: var(--color-accent);
}

.data-\[state\=open\]\:animate-in[data-state="open"] {
  animation-name: enter;
  animation-duration: undefined;
  --tw-enter-opacity: initial;
  --tw-enter-scale: initial;
  --tw-enter-rotate: initial;
  --tw-enter-translate-x: initial;
  --tw-enter-translate-y: initial;
}

.data-\[state\=open\]\:fade-in-0[data-state="open"] {
  --tw-enter-opacity: 0;
}

.data-\[state\=open\]\:zoom-in-95[data-state="open"] {
  --tw-enter-scale: .95;
}

.dark\:data-\[state\=checked\]\:bg-primary:is(.dark *)[data-state="checked"] {
  background-color: var(--color-primary);
}

.\[\&_svg\]\:pointer-events-none svg {
  pointer-events: none;
}

.\[\&_svg\]\:shrink-0 svg {
  flex-shrink: 0;
}

:is(.\*\:\[span\]\:last\:flex > *):is(span):last-child {
  display: flex;
}

:is(.\*\:\[span\]\:last\:items-center > *):is(span):last-child {
  align-items: center;
}

.\[\&\>svg\]\:pointer-events-none > svg {
  pointer-events: none;
}

@media (hover: hover) {
  a.\[a\&\]\:hover\:bg-accent:hover {
    background-color: var(--color-accent);
  }
}

@media (hover: hover) {
  a.\[a\&\]\:hover\:bg-primary\/90:hover {
    background-color: var(--color-primary);
  }

  @supports (color: color-mix(in lab, red, red)) {
    a.\[a\&\]\:hover\:bg-primary\/90:hover {
      background-color: color-mix(in oklab, var(--color-primary) 90%, transparent);
    }
  }
}

@media (hover: hover) {
  a.\[a\&\]\:hover\:bg-secondary\/90:hover {
    background-color: var(--color-secondary);
  }

  @supports (color: color-mix(in lab, red, red)) {
    a.\[a\&\]\:hover\:bg-secondary\/90:hover {
      background-color: color-mix(in oklab, var(--color-secondary) 90%, transparent);
    }
  }
}

body, html {
  overflow: hidden;
}

@keyframes enter {
  from {
    opacity: var(--tw-enter-opacity, 1);
    transform: translate3d(var(--tw-enter-translate-x, 0), var(--tw-enter-translate-y, 0), 0) scale3d(var(--tw-enter-scale, 1), var(--tw-enter-scale, 1), var(--tw-enter-scale, 1)) rotate(var(--tw-enter-rotate, 0));
  }
}

@keyframes exit {
  to {
    opacity: var(--tw-exit-opacity, 1);
    transform: translate3d(var(--tw-exit-translate-x, 0), var(--tw-exit-translate-y, 0), 0) scale3d(var(--tw-exit-scale, 1), var(--tw-exit-scale, 1), var(--tw-exit-scale, 1)) rotate(var(--tw-exit-rotate, 0));
  }
}

@layer base {
  :where(:root), :root:has(input.theme-controller[value="light"]:checked), [data-theme="light"] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% .006 285.885);
    --color-primary: oklch(45% .24 277.023);
    --color-primary-content: oklch(93% .034 272.788);
    --color-secondary: oklch(65% .241 354.308);
    --color-secondary-content: oklch(94% .028 342.258);
    --color-accent: oklch(77% .152 181.912);
    --color-accent-content: oklch(38% .063 188.416);
    --color-neutral: oklch(14% .005 285.823);
    --color-neutral-content: oklch(92% .004 286.32);
    --color-info: oklch(74% .16 232.661);
    --color-info-content: oklch(29% .066 243.157);
    --color-success: oklch(76% .177 163.223);
    --color-success-content: oklch(37% .077 168.94);
    --color-warning: oklch(82% .189 84.429);
    --color-warning-content: oklch(41% .112 45.904);
    --color-error: oklch(71% .194 13.428);
    --color-error-content: oklch(27% .105 12.094);
    --radius-selector: .5rem;
    --radius-field: .25rem;
    --radius-box: .5rem;
    --size-selector: .25rem;
    --size-field: .25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(25.33% .016 252.42);
      --color-base-200: oklch(23.26% .014 253.1);
      --color-base-300: oklch(21.15% .012 254.09);
      --color-base-content: oklch(97.807% .029 256.847);
      --color-primary: oklch(58% .233 277.117);
      --color-primary-content: oklch(96% .018 272.314);
      --color-secondary: oklch(65% .241 354.308);
      --color-secondary-content: oklch(94% .028 342.258);
      --color-accent: oklch(77% .152 181.912);
      --color-accent-content: oklch(38% .063 188.416);
      --color-neutral: oklch(14% .005 285.823);
      --color-neutral-content: oklch(92% .004 286.32);
      --color-info: oklch(74% .16 232.661);
      --color-info-content: oklch(29% .066 243.157);
      --color-success: oklch(76% .177 163.223);
      --color-success-content: oklch(37% .077 168.94);
      --color-warning: oklch(82% .189 84.429);
      --color-warning-content: oklch(41% .112 45.904);
      --color-error: oklch(71% .194 13.428);
      --color-error-content: oklch(27% .105 12.094);
      --radius-selector: .5rem;
      --radius-field: .25rem;
      --radius-box: .5rem;
      --size-selector: .25rem;
      --size-field: .25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }

  :root:has(input.theme-controller[value="light"]:checked), [data-theme="light"] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% .006 285.885);
    --color-primary: oklch(45% .24 277.023);
    --color-primary-content: oklch(93% .034 272.788);
    --color-secondary: oklch(65% .241 354.308);
    --color-secondary-content: oklch(94% .028 342.258);
    --color-accent: oklch(77% .152 181.912);
    --color-accent-content: oklch(38% .063 188.416);
    --color-neutral: oklch(14% .005 285.823);
    --color-neutral-content: oklch(92% .004 286.32);
    --color-info: oklch(74% .16 232.661);
    --color-info-content: oklch(29% .066 243.157);
    --color-success: oklch(76% .177 163.223);
    --color-success-content: oklch(37% .077 168.94);
    --color-warning: oklch(82% .189 84.429);
    --color-warning-content: oklch(41% .112 45.904);
    --color-error: oklch(71% .194 13.428);
    --color-error-content: oklch(27% .105 12.094);
    --radius-selector: .5rem;
    --radius-field: .25rem;
    --radius-box: .5rem;
    --size-selector: .25rem;
    --size-field: .25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }

  :root:has(input.theme-controller[value="dark"]:checked), [data-theme="dark"] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% .016 252.42);
    --color-base-200: oklch(23.26% .014 253.1);
    --color-base-300: oklch(21.15% .012 254.09);
    --color-base-content: oklch(97.807% .029 256.847);
    --color-primary: oklch(58% .233 277.117);
    --color-primary-content: oklch(96% .018 272.314);
    --color-secondary: oklch(65% .241 354.308);
    --color-secondary-content: oklch(94% .028 342.258);
    --color-accent: oklch(77% .152 181.912);
    --color-accent-content: oklch(38% .063 188.416);
    --color-neutral: oklch(14% .005 285.823);
    --color-neutral-content: oklch(92% .004 286.32);
    --color-info: oklch(74% .16 232.661);
    --color-info-content: oklch(29% .066 243.157);
    --color-success: oklch(76% .177 163.223);
    --color-success-content: oklch(37% .077 168.94);
    --color-warning: oklch(82% .189 84.429);
    --color-warning-content: oklch(41% .112 45.904);
    --color-error: oklch(71% .194 13.428);
    --color-error-content: oklch(27% .105 12.094);
    --radius-selector: .5rem;
    --radius-field: .25rem;
    --radius-box: .5rem;
    --size-selector: .25rem;
    --size-field: .25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }

  @property --radialprogress {
    syntax: "<percentage>"; inherits: true; initial-value: 0%;
  }

  :root {
    scrollbar-color: currentColor #0000;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }

  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }

  :root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked) {
    overflow: hidden;
  }

  :where(:root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked)) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :where(:root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked)) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }

  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }

  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}

@keyframes radio {
  0% {
    padding: 5px;
  }

  50% {
    padding: 3px;
  }
}

@keyframes skeleton {
  0% {
    background-position: 150%;
  }

  100% {
    background-position: -50%;
  }
}

@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}

@keyframes toast {
  0% {
    opacity: 0;
    scale: .9;
  }

  100% {
    opacity: 1;
    scale: 1;
  }
}

@keyframes dropdown {
  0% {
    opacity: 0;
  }
}

@keyframes rating {
  0%, 40% {
    filter: brightness(1.05) contrast(1.05);
    scale: 1.1;
  }
}

@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-rotate-x {
  syntax: "*";
  inherits: false
}

@property --tw-rotate-y {
  syntax: "*";
  inherits: false
}

@property --tw-rotate-z {
  syntax: "*";
  inherits: false
}

@property --tw-skew-x {
  syntax: "*";
  inherits: false
}

@property --tw-skew-y {
  syntax: "*";
  inherits: false
}

@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-leading {
  syntax: "*";
  inherits: false
}

@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-duration {
  syntax: "*";
  inherits: false
}

@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-ring-color {
  syntax: "*";
  inherits: false
}

@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false
}

@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-ring-inset {
  syntax: "*";
  inherits: false
}

@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0;
}

@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}

@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

/*# sourceMappingURL=src_app_globals_css_f9ee138c._.single.css.map*/